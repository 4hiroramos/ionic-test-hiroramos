{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/hiromi/ionic-react-wordpress/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar qs = require('qs');\n\nvar alphaNumericSort = require('../util/alphanumeric-sort');\n\nvar keyValToObj = require('../util/key-val-to-obj');\n\nvar paramSetter = require('../util/parameter-setter');\n\nvar objectReduce = require('../util/object-reduce');\n\nvar unique = require('../util/unique');\n/**\n * WPRequest is the base API request object constructor\n *\n * @constructor WPRequest\n * @param {Object} options A hash of options for the WPRequest instance\n * @param {String} options.endpoint The endpoint URI for the invoking WPAPI instance\n * @param {Object} options.transport An object of http transport methods (get, post, etc)\n * @param {String} [options.username] A username for authenticating API requests\n * @param {String} [options.password] A password for authenticating API requests\n * @param {String} [options.nonce] A WP nonce for use with cookie authentication\n */\n\n\nfunction WPRequest(options) {\n  /**\n   * Configuration options for the request\n   *\n   * @property _options\n   * @type Object\n   * @private\n   * @default {}\n   */\n  this._options = [// Whitelisted options keys\n  'auth', 'endpoint', 'headers', 'username', 'password', 'nonce'].reduce(function (localOptions, key) {\n    if (options && options[key]) {\n      localOptions[key] = options[key];\n    }\n\n    return localOptions;\n  }, {});\n  /**\n   * The HTTP transport methods (.get, .post, .put, .delete, .head) to use for this request\n   *\n   * @property transport\n   * @type {Object}\n   * @private\n   */\n\n  this.transport = options && options.transport;\n  /**\n   * A hash of query parameters\n   * This is used to store the values for supported query parameters like ?_embed\n   *\n   * @property _params\n   * @type Object\n   * @private\n   * @default {}\n   */\n\n  this._params = {};\n  /**\n   * Methods supported by this API request instance:\n   * Individual endpoint handlers specify their own subset of supported methods\n   *\n   * @property _supportedMethods\n   * @type Array\n   * @private\n   * @default [ 'head', 'get', 'put', 'post', 'delete' ]\n   */\n\n  this._supportedMethods = ['head', 'get', 'put', 'post', 'delete'];\n  /**\n   * A hash of values to assemble into the API request path\n   * (This will be overwritten by each specific endpoint handler constructor)\n   *\n   * @property _path\n   * @type Object\n   * @private\n   * @default {}\n   */\n\n  this._path = {};\n} // Private helper methods\n// ======================\n\n/**\n * Identity function for use within invokeAndPromisify()\n * @private\n */\n\n\nvar identity = function identity(value) {\n  return value;\n};\n/**\n * Process arrays of taxonomy terms into query parameters.\n * All terms listed in the arrays will be required (AND behavior).\n *\n * This method will not be called with any values unless we are handling\n * an endpoint with the filter mixin; however, since parameter handling\n * (and therefore `_renderQuery()`) are part of WPRequest itself, this\n * helper method lives here alongside the code where it is used.\n *\n * @example\n *     prepareTaxonomies({\n *         tag: [ 'tag1 ', 'tag2' ], // by term slug\n *         cat: [ 7 ] // by term ID\n *     }) === {\n *         tag: 'tag1+tag2',\n *         cat: '7'\n *     }\n *\n * @private\n * @param {Object} taxonomyFilters An object of taxonomy term arrays, keyed by taxonomy name\n * @returns {Object} An object of prepareFilters-ready query arg and query param value pairs\n */\n\n\nfunction prepareTaxonomies(taxonomyFilters) {\n  if (!taxonomyFilters) {\n    return {};\n  }\n\n  return objectReduce(taxonomyFilters, function (result, terms, key) {\n    // Trim whitespace and concatenate multiple terms with +\n    result[key] = terms // Coerce term into a string so that trim() won't fail\n    .map(function (term) {\n      return (term + '').trim().toLowerCase();\n    }).join('+');\n    return result;\n  }, {});\n}\n/**\n * Return an object with any properties with undefined, null or empty string\n * values removed.\n *\n * @example\n *\n *     populated({\n *       a: 'a',\n *       b: '',\n *       c: null\n *     }); // { a: 'a' }\n *\n * @private\n * @param {Object} obj An object of key/value pairs\n * @returns {Object} That object with all empty values removed\n */\n\n\nvar populated = function populated(obj) {\n  if (!obj) {\n    return obj;\n  }\n\n  return objectReduce(obj, function (values, val, key) {\n    if (val !== undefined && val !== null && val !== '') {\n      values[key] = val;\n    }\n\n    return values;\n  }, {});\n};\n/**\n * Assert whether a provided URL component is \"valid\" by checking it against\n * an array of registered path component validator methods for that level of\n * the URL path.\n *\n * @private\n * @param {object[]} levelDefinitions An array of Level Definition objects\n * @param {string}   levelContents    The URL path string that has been specified\n *                                    for use on the provided level\n * @returns {boolean} Whether the provided input matches any of the provided\n * level validation functions\n */\n\n\nvar validatePathLevel = function validatePathLevel(levelDefinitions, levelContents) {\n  // One \"level\" may have multiple options, as a route tree is a branching\n  // structure. We consider a level \"valid\" if the provided levelContents\n  // match any of the available validators.\n  var valid = levelDefinitions.reduce(function (anyOptionValid, levelOption) {\n    if (!levelOption.validate) {\n      // If there is no validator function, the level is implicitly valid\n      return true;\n    }\n\n    return anyOptionValid || levelOption.validate(levelContents);\n  }, false);\n\n  if (!valid) {\n    throw new Error(['Invalid path component:', levelContents, // awkward pluralization support:\n    'does not match' + (levelDefinitions.length > 1 ? ' any of' : ''), levelDefinitions.reduce(function (components, levelOption) {\n      return components.concat(levelOption.component);\n    }, []).join(', ')].join(' '));\n  }\n}; // (Semi-)Private Prototype Methods\n// ================================\n\n/**\n * Process the endpoint query's filter objects into a valid query string.\n * Nested objects and Array properties are rendered with indexed array syntax.\n *\n * @example\n *     _renderQuery({ p1: 'val1', p2: 'val2' });  // ?p1=val1&p2=val2\n *     _renderQuery({ obj: { prop: 'val' } });    // ?obj[prop]=val\n *     _renderQuery({ arr: [ 'val1', 'val2' ] }); // ?arr[0]=val1&arr[1]=val2\n *\n * @private\n *\n * @method _renderQuery\n * @returns {String} A query string representing the specified filter parameters\n */\n\n\nWPRequest.prototype._renderQuery = function () {\n  // Build the full query parameters object\n  var queryParams = _objectSpread({}, populated(this._params)); // Prepare any taxonomies and merge with other filter values\n\n\n  var taxonomies = prepareTaxonomies(this._taxonomyFilters);\n  queryParams.filter = _objectSpread({}, populated(this._filters), {}, taxonomies); // Parse query parameters object into a query string, sorting the object\n  // properties by alphabetical order (consistent property ordering can make\n  // for easier caching of request URIs)\n\n  var queryString = qs.stringify(queryParams, {\n    arrayFormat: 'brackets'\n  }).split('&').sort().join('&'); // Check if the endpoint contains a previous query and set the query character accordingly.\n\n  var queryCharacter = /\\?/.test(this._options.endpoint) ? '&' : '?'; // Prepend a \"?\" (or a \"&\") if a query is present, and return.\n\n  return queryString === '' ? '' : queryCharacter + queryString;\n};\n/**\n * Validate & assemble a path string from the request object's _path\n *\n * @private\n * @returns {String} The rendered path\n */\n\n\nWPRequest.prototype._renderPath = function () {\n  // Call validatePath: if the provided path components are not well-formed,\n  // an error will be thrown\n  this.validatePath();\n  var pathParts = this._path;\n  var orderedPathParts = Object.keys(pathParts).sort(function (a, b) {\n    var intA = parseInt(a, 10);\n    var intB = parseInt(b, 10);\n    return intA - intB;\n  }).map(function (pathPartKey) {\n    return pathParts[pathPartKey];\n  }); // Combine all parts of the path together, filtered to omit any components\n  // that are unspecified or empty strings, to create the full path template\n\n  var path = [this._namespace].concat(orderedPathParts).filter(identity).join('/');\n  return path;\n}; // Public Prototype Methods\n// ========================\n\n/**\n * Parse the request into a WordPress API request URI string\n *\n * @method\n * @returns {String} The URI for the HTTP request to be sent\n */\n\n\nWPRequest.prototype.toString = function () {\n  // Render the path to a string\n  var path = this._renderPath(); // Render the query string\n\n\n  var queryStr = this._renderQuery();\n\n  return this._options.endpoint + path + queryStr;\n};\n/**\n * Set a component of the resource URL itself (as opposed to a query parameter)\n *\n * If a path component has already been set at this level, throw an error:\n * requests are meant to be transient, so any re-writing of a previously-set\n * path part value is likely to be a mistake.\n *\n * @method\n * @chainable\n * @param {Number|String} level A \"level\" of the path to set, e.g. \"1\" or \"2\"\n * @param {Number|String} val   The value to set at that path part level\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\n\nWPRequest.prototype.setPathPart = function (level, val) {\n  if (this._path[level]) {\n    throw new Error('Cannot overwrite value ' + this._path[level]);\n  }\n\n  this._path[level] = val;\n  return this;\n};\n/**\n * Validate whether the specified path parts are valid for this endpoint\n *\n * \"Path parts\" are non-query-string URL segments, like \"some\" \"path\" in the URL\n * `mydomain.com/some/path?and=a&query=string&too`. Because a well-formed path\n * is necessary to execute a successful API request, we throw an error if the\n * user has omitted a value (such as `/some/[missing component]/url`) or has\n * provided a path part value that does not match the regular expression the\n * API uses to goven that segment.\n *\n * @method\n * @chainable\n * @returns {WPRequest} The WPRequest instance (for chaining), if no errors were found\n */\n\n\nWPRequest.prototype.validatePath = function () {\n  // Iterate through all _specified_ levels of this endpoint\n  var specifiedLevels = Object.keys(this._path).map(function (level) {\n    return parseInt(level, 10);\n  }).filter(function (pathPartKey) {\n    return !isNaN(pathPartKey);\n  });\n  var maxLevel = Math.max.apply(null, specifiedLevels); // Ensure that all necessary levels are specified\n\n  var path = [];\n  var valid = true;\n\n  for (var level = 0; level <= maxLevel; level++) {\n    if (!this._levels || !this._levels[level]) {\n      continue;\n    }\n\n    if (this._path[level]) {\n      // Validate the provided path level against all available path validators\n      validatePathLevel(this._levels[level], this._path[level]); // Add the path value to the array\n\n      path.push(this._path[level]);\n    } else {\n      path.push(' ??? ');\n      valid = false;\n    }\n  }\n\n  if (!valid) {\n    throw new Error('Incomplete URL! Missing component: /' + path.join('/'));\n  }\n\n  return this;\n};\n/**\n * Set a parameter to render into the final query URI.\n *\n * @method\n * @chainable\n * @param {String|Object} props The name of the parameter to set, or an object containing\n *                              parameter keys and their corresponding values\n * @param {String|Number|Array} [value] The value of the parameter being set\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\n\nWPRequest.prototype.param = function (props, value) {\n  var _this = this;\n\n  if (!props || typeof props === 'string' && value === undefined) {\n    // We have no property to set, or no value to set for that property\n    return this;\n  } // We can use the same iterator function below to handle explicit key-value\n  // pairs if we convert them into to an object we can iterate over:\n\n\n  if (typeof props === 'string') {\n    props = keyValToObj(props, value);\n  } // Iterate through the properties\n\n\n  Object.keys(props).forEach(function (key) {\n    var value = props[key]; // Arrays should be de-duped and sorted\n\n    if (Array.isArray(value)) {\n      value = unique(value).sort(alphaNumericSort);\n    } // Set the value\n\n\n    _this._params[key] = value;\n  });\n  return this;\n}; // Globally-applicable parameters that impact the shape of the request or response\n// ===============================================================================\n\n/**\n * Set the context of the request. Used primarily to expose private values on a\n * request object by setting the context to \"edit\".\n *\n * @method\n * @chainable\n * @param {String} context The context to set on the request\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\n\nWPRequest.prototype.context = paramSetter('context');\n/**\n * Convenience wrapper for `.context( 'edit' )`\n *\n * @method\n * @chainable\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\nWPRequest.prototype.edit = function () {\n  return this.context('edit');\n};\n/**\n * Return embedded resources as part of the response payload.\n *\n * @method\n * @chainable\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\n\nWPRequest.prototype.embed = function () {\n  return this.param('_embed', true);\n}; // Parameters supported by all/nearly all default collections\n// ==========================================================\n\n/**\n * Set the pagination of a request. Use in conjunction with `.perPage()` for explicit\n * pagination handling. (The number of pages in a response can be retrieved from the\n * response's `_paging.totalPages` property.)\n *\n * @method\n * @chainable\n * @param {Number} pageNumber The page number of results to retrieve\n * @returns The request instance (for chaining)\n */\n\n\nWPRequest.prototype.page = paramSetter('page');\n/**\n * Set the number of items to be returned in a page of responses.\n *\n * @method\n * @chainable\n * @param {Number} itemsPerPage The number of items to return in one page of results\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.perPage = paramSetter('per_page');\n/**\n * Set an arbitrary offset to retrieve items from a specific point in a collection.\n *\n * @method\n * @chainable\n * @param {Number} offsetNumber The number of items by which to offset the response\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.offset = paramSetter('offset');\n/**\n * Change the sort direction of a returned collection\n *\n * @example <caption>order comments chronologically (oldest first)</caption>\n *\n *     site.comments().order( 'asc' )...\n *\n * @method\n * @chainable\n * @param {String} direction The order to use when sorting the response\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.order = paramSetter('order');\n/**\n * Order a collection by a specific field\n *\n * @method\n * @chainable\n * @param {String} field The field by which to order the response\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.orderby = paramSetter('orderby');\n/**\n * Filter results to those matching the specified search terms.\n *\n * @method\n * @chainable\n * @param {String} searchString A string to search for within post content\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.search = paramSetter('search');\n/**\n * Include specific resource IDs in the response collection.\n *\n * @method\n * @chainable\n * @param {Number|Number[]} ids An ID or array of IDs to include\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.include = paramSetter('include');\n/**\n * Exclude specific resource IDs in the response collection.\n *\n * @method\n * @chainable\n * @param {Number|Number[]} ids An ID or array of IDs to exclude\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.exclude = paramSetter('exclude');\n/**\n * Query a collection for members with a specific slug.\n *\n * @method\n * @chainable\n * @param {String} slug A post slug (slug), e.g. \"hello-world\"\n * @returns The request instance (for chaining)\n */\n\nWPRequest.prototype.slug = paramSetter('slug'); // HTTP Transport Prototype Methods\n// ================================\n// Chaining methods\n// ================\n\n/**\n * Set the namespace of the request, e.g. to specify the API root for routes\n * registered by wp core v2 (\"wp/v2\") or by any given plugin. Any previously-\n * set namespace will be overwritten by subsequent calls to the method.\n *\n * @method\n * @chainable\n * @param {String} namespace A namespace string, e.g. \"wp/v2\"\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\nWPRequest.prototype.namespace = function (namespace) {\n  this._namespace = namespace;\n  return this;\n};\n/**\n * Set a request to use authentication, and optionally provide auth credentials\n *\n * If auth credentials were already specified when the WPAPI instance was created, calling\n * `.auth` on the request chain will set that request to use the existing credentials:\n *\n * @example <caption>use existing credentials</caption>\n *\n *     request.auth().get...\n *\n * Alternatively, a username & password (or nonce) can be explicitly passed into `.auth`:\n *\n * @example <caption>use explicit basic authentication credentials</caption>\n *\n *     request.auth({\n *       username: 'admin',\n *       password: 'super secure'\n *     }).get...\n *\n * @example <caption>use a nonce for cookie authentication</caption>\n *\n *     request.auth({\n *       nonce: 'somenonce'\n *     })...\n *\n * @method\n * @chainable\n * @param {Object} credentials            An object with 'username' and 'password' string\n *                                        properties, or else a 'nonce' property\n * @param {String} [credentials.username] A WP-API Basic HTTP Authentication username\n * @param {String} [credentials.password] A WP-API Basic HTTP Authentication password\n * @param {String} [credentials.nonce]    A WP nonce for use with cookie authentication\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\n\nWPRequest.prototype.auth = function (credentials) {\n  if (typeof credentials === 'object') {\n    if (typeof credentials.username === 'string') {\n      this._options.username = credentials.username;\n    }\n\n    if (typeof credentials.password === 'string') {\n      this._options.password = credentials.password;\n    }\n\n    if (credentials.nonce) {\n      this._options.nonce = credentials.nonce;\n    }\n  } // Set the \"auth\" options flag that will force authentication on this request\n\n\n  this._options.auth = true;\n  return this;\n};\n/**\n * Specify a file or a file buffer to attach to the request, for use when\n * creating a new Media item\n *\n * @example <caption>within a server context</caption>\n *\n *     wp.media()\n *       // Pass .file() the file system path to a file to upload\n *       .file( '/path/to/file.jpg' )\n *       .create({})...\n *\n * @example <caption>within a browser context</caption>\n *\n *     wp.media()\n *       // Pass .file() the file reference from an HTML file input\n *       .file( document.querySelector( 'input[type=\"file\"]' ).files[0] )\n *       .create({})...\n *\n * @method\n * @chainable\n * @param {string|object} file   A path to a file (in Node) or an file object\n *                               (Node or Browser) to attach to the request\n * @param {string}        [name] An (optional) filename to use for the file\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\n\nWPRequest.prototype.file = function (file, name) {\n  this._attachment = file; // Explicitly set to undefined if not provided, to override any previously-\n  // set attachment name property that might exist from a prior `.file()` call\n\n  this._attachmentName = name ? name : undefined;\n  return this;\n}; // HTTP Methods: Public Interface\n// ==============================\n\n/**\n * Specify one or more headers to send with the dispatched HTTP request.\n *\n * @example <caption>Set a single header to be used on this request</caption>\n *\n *     request.setHeaders( 'Authorization', 'Bearer trustme' )...\n *\n * @example <caption>Set multiple headers to be used by this request</caption>\n *\n *     request.setHeaders({\n *       Authorization: 'Bearer comeonwereoldfriendsright',\n *       'Accept-Language': 'en-CA'\n *     })...\n *\n * @since 1.1.0\n * @method\n * @chainable\n * @param {String|Object} headers The name of the header to set, or an object of\n *                                header names and their associated string values\n * @param {String}        [value] The value of the header being set\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\n\n\nWPRequest.prototype.setHeaders = function (headers, value) {\n  // We can use the same iterator function below to handle explicit key-value\n  // pairs if we convert them into to an object we can iterate over:\n  if (typeof headers === 'string') {\n    headers = keyValToObj(headers, value);\n  }\n\n  this._options.headers = _objectSpread({}, this._options.headers || {}, {}, headers);\n  return this;\n};\n/**\n * Get (download the data for) the specified resource\n *\n * @method\n * @async\n * @param {Function} [callback] A callback to invoke with the results of the GET request\n * @returns {Promise} A promise to the results of the HTTP request\n */\n\n\nWPRequest.prototype.get = function (callback) {\n  return this.transport.get(this, callback);\n};\n/**\n * Get the headers for the specified resource\n *\n * @method\n * @async\n * @param {Function} [callback] A callback to invoke with the results of the HEAD request\n * @returns {Promise} A promise to the header results of the HTTP request\n */\n\n\nWPRequest.prototype.headers = function (callback) {\n  return this.transport.head(this, callback);\n};\n/**\n * Create the specified resource with the provided data\n *\n * This is the public interface for creating POST requests\n *\n * @method\n * @async\n * @param {Object} data The data for the POST request\n * @param {Function} [callback] A callback to invoke with the results of the POST request\n * @returns {Promise} A promise to the results of the HTTP request\n */\n\n\nWPRequest.prototype.create = function (data, callback) {\n  return this.transport.post(this, data, callback);\n};\n/**\n * Update the specified resource with the provided data\n *\n * This is the public interface for creating PUT requests\n *\n * @method\n * @async\n * @private\n * @param {Object} data The data for the PUT request\n * @param {Function} [callback] A callback to invoke with the results of the PUT request\n * @returns {Promise} A promise to the results of the HTTP request\n */\n\n\nWPRequest.prototype.update = function (data, callback) {\n  return this.transport.put(this, data, callback);\n};\n/**\n * Delete the specified resource\n *\n * @method\n * @async\n * @param {Object} [data] Data to send along with the DELETE request\n * @param {Function} [callback] A callback to invoke with the results of the DELETE request\n * @returns {Promise} A promise to the results of the HTTP request\n */\n\n\nWPRequest.prototype.delete = function (data, callback) {\n  return this.transport.delete(this, data, callback);\n};\n/**\n * Calling .then on a query chain will invoke the query as a GET and return a promise\n *\n * @method\n * @async\n * @param {Function} [successCallback] A callback to handle the data returned from the GET request\n * @param {Function} [failureCallback] A callback to handle any errors encountered by the request\n * @returns {Promise} A promise to the results of the HTTP request\n */\n\n\nWPRequest.prototype.then = function (successCallback, failureCallback) {\n  return this.transport.get(this).then(successCallback, failureCallback);\n};\n\nmodule.exports = WPRequest;","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/constructors/wp-request.js"],"names":["qs","require","alphaNumericSort","keyValToObj","paramSetter","objectReduce","unique","WPRequest","options","_options","reduce","localOptions","key","transport","_params","_supportedMethods","_path","identity","value","prepareTaxonomies","taxonomyFilters","result","terms","map","term","trim","toLowerCase","join","populated","obj","values","val","undefined","validatePathLevel","levelDefinitions","levelContents","valid","anyOptionValid","levelOption","validate","Error","length","components","concat","component","prototype","_renderQuery","queryParams","taxonomies","_taxonomyFilters","filter","_filters","queryString","stringify","arrayFormat","split","sort","queryCharacter","test","endpoint","_renderPath","validatePath","pathParts","orderedPathParts","Object","keys","a","b","intA","parseInt","intB","pathPartKey","path","_namespace","toString","queryStr","setPathPart","level","specifiedLevels","isNaN","maxLevel","Math","max","apply","_levels","push","param","props","forEach","Array","isArray","context","edit","embed","page","perPage","offset","order","orderby","search","include","exclude","slug","namespace","auth","credentials","username","password","nonce","file","name","_attachment","_attachmentName","setHeaders","headers","get","callback","head","create","data","post","update","put","delete","then","successCallback","failureCallback","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst qs = require( 'qs' );\n\nconst alphaNumericSort = require( '../util/alphanumeric-sort' );\nconst keyValToObj = require( '../util/key-val-to-obj' );\nconst paramSetter = require( '../util/parameter-setter' );\nconst objectReduce = require( '../util/object-reduce' );\nconst unique = require( '../util/unique' );\n\n/**\n * WPRequest is the base API request object constructor\n *\n * @constructor WPRequest\n * @param {Object} options A hash of options for the WPRequest instance\n * @param {String} options.endpoint The endpoint URI for the invoking WPAPI instance\n * @param {Object} options.transport An object of http transport methods (get, post, etc)\n * @param {String} [options.username] A username for authenticating API requests\n * @param {String} [options.password] A password for authenticating API requests\n * @param {String} [options.nonce] A WP nonce for use with cookie authentication\n */\nfunction WPRequest( options ) {\n\t/**\n\t * Configuration options for the request\n\t *\n\t * @property _options\n\t * @type Object\n\t * @private\n\t * @default {}\n\t */\n\tthis._options = [\n\t\t// Whitelisted options keys\n\t\t'auth',\n\t\t'endpoint',\n\t\t'headers',\n\t\t'username',\n\t\t'password',\n\t\t'nonce',\n\t].reduce( ( localOptions, key ) => {\n\t\tif ( options && options[ key ] ) {\n\t\t\tlocalOptions[ key ] = options[ key ];\n\t\t}\n\t\treturn localOptions;\n\t}, {} );\n\n\t/**\n\t * The HTTP transport methods (.get, .post, .put, .delete, .head) to use for this request\n\t *\n\t * @property transport\n\t * @type {Object}\n\t * @private\n\t */\n\tthis.transport = options && options.transport;\n\n\t/**\n\t * A hash of query parameters\n\t * This is used to store the values for supported query parameters like ?_embed\n\t *\n\t * @property _params\n\t * @type Object\n\t * @private\n\t * @default {}\n\t */\n\tthis._params = {};\n\n\t/**\n\t * Methods supported by this API request instance:\n\t * Individual endpoint handlers specify their own subset of supported methods\n\t *\n\t * @property _supportedMethods\n\t * @type Array\n\t * @private\n\t * @default [ 'head', 'get', 'put', 'post', 'delete' ]\n\t */\n\tthis._supportedMethods = [ 'head', 'get', 'put', 'post', 'delete' ];\n\n\t/**\n\t * A hash of values to assemble into the API request path\n\t * (This will be overwritten by each specific endpoint handler constructor)\n\t *\n\t * @property _path\n\t * @type Object\n\t * @private\n\t * @default {}\n\t */\n\tthis._path = {};\n}\n\n// Private helper methods\n// ======================\n\n/**\n * Identity function for use within invokeAndPromisify()\n * @private\n */\nconst identity = value => value;\n\n/**\n * Process arrays of taxonomy terms into query parameters.\n * All terms listed in the arrays will be required (AND behavior).\n *\n * This method will not be called with any values unless we are handling\n * an endpoint with the filter mixin; however, since parameter handling\n * (and therefore `_renderQuery()`) are part of WPRequest itself, this\n * helper method lives here alongside the code where it is used.\n *\n * @example\n *     prepareTaxonomies({\n *         tag: [ 'tag1 ', 'tag2' ], // by term slug\n *         cat: [ 7 ] // by term ID\n *     }) === {\n *         tag: 'tag1+tag2',\n *         cat: '7'\n *     }\n *\n * @private\n * @param {Object} taxonomyFilters An object of taxonomy term arrays, keyed by taxonomy name\n * @returns {Object} An object of prepareFilters-ready query arg and query param value pairs\n */\nfunction prepareTaxonomies( taxonomyFilters ) {\n\tif ( ! taxonomyFilters ) {\n\t\treturn {};\n\t}\n\n\treturn objectReduce(\n\t\ttaxonomyFilters,\n\t\t( result, terms, key ) => {\n\t\t\t// Trim whitespace and concatenate multiple terms with +\n\t\t\tresult[ key ] = terms\n\t\t\t\t// Coerce term into a string so that trim() won't fail\n\t\t\t\t.map( term => ( term + '' ).trim().toLowerCase() )\n\t\t\t\t.join( '+' );\n\n\t\t\treturn result;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Return an object with any properties with undefined, null or empty string\n * values removed.\n *\n * @example\n *\n *     populated({\n *       a: 'a',\n *       b: '',\n *       c: null\n *     }); // { a: 'a' }\n *\n * @private\n * @param {Object} obj An object of key/value pairs\n * @returns {Object} That object with all empty values removed\n */\nconst populated = ( obj ) => {\n\tif ( ! obj ) {\n\t\treturn obj;\n\t}\n\treturn objectReduce(\n\t\tobj,\n\t\t( values, val, key ) => {\n\t\t\tif ( val !== undefined && val !== null && val !== '' ) {\n\t\t\t\tvalues[ key ] = val;\n\t\t\t}\n\t\t\treturn values;\n\t\t},\n\t\t{}\n\t);\n};\n\n/**\n * Assert whether a provided URL component is \"valid\" by checking it against\n * an array of registered path component validator methods for that level of\n * the URL path.\n *\n * @private\n * @param {object[]} levelDefinitions An array of Level Definition objects\n * @param {string}   levelContents    The URL path string that has been specified\n *                                    for use on the provided level\n * @returns {boolean} Whether the provided input matches any of the provided\n * level validation functions\n */\nconst validatePathLevel = ( levelDefinitions, levelContents ) => {\n\t// One \"level\" may have multiple options, as a route tree is a branching\n\t// structure. We consider a level \"valid\" if the provided levelContents\n\t// match any of the available validators.\n\tconst valid = levelDefinitions.reduce( ( anyOptionValid, levelOption ) => {\n\t\tif ( ! levelOption.validate ) {\n\t\t\t// If there is no validator function, the level is implicitly valid\n\t\t\treturn true;\n\t\t}\n\t\treturn anyOptionValid || levelOption.validate( levelContents );\n\t}, false );\n\n\tif ( ! valid ) {\n\t\tthrow new Error( [\n\t\t\t'Invalid path component:',\n\t\t\tlevelContents,\n\t\t\t// awkward pluralization support:\n\t\t\t'does not match' + ( levelDefinitions.length > 1 ? ' any of' : '' ),\n\t\t\tlevelDefinitions.reduce(\n\t\t\t\t( components, levelOption ) => components.concat( levelOption.component ),\n\t\t\t\t[]\n\t\t\t).join( ', ' ),\n\t\t].join( ' ' ) );\n\t}\n};\n\n// (Semi-)Private Prototype Methods\n// ================================\n\n/**\n * Process the endpoint query's filter objects into a valid query string.\n * Nested objects and Array properties are rendered with indexed array syntax.\n *\n * @example\n *     _renderQuery({ p1: 'val1', p2: 'val2' });  // ?p1=val1&p2=val2\n *     _renderQuery({ obj: { prop: 'val' } });    // ?obj[prop]=val\n *     _renderQuery({ arr: [ 'val1', 'val2' ] }); // ?arr[0]=val1&arr[1]=val2\n *\n * @private\n *\n * @method _renderQuery\n * @returns {String} A query string representing the specified filter parameters\n */\nWPRequest.prototype._renderQuery = function() {\n\t// Build the full query parameters object\n\tconst queryParams = {\n\t\t...populated( this._params ),\n\t};\n\n\t// Prepare any taxonomies and merge with other filter values\n\tconst taxonomies = prepareTaxonomies( this._taxonomyFilters );\n\tqueryParams.filter = {\n\t\t...populated( this._filters ),\n\t\t...taxonomies,\n\t};\n\n\t// Parse query parameters object into a query string, sorting the object\n\t// properties by alphabetical order (consistent property ordering can make\n\t// for easier caching of request URIs)\n\tconst queryString = qs.stringify( queryParams, { arrayFormat: 'brackets' } )\n\t\t.split( '&' )\n\t\t.sort()\n\t\t.join( '&' );\n\n\t// Check if the endpoint contains a previous query and set the query character accordingly.\n\tconst queryCharacter = /\\?/.test( this._options.endpoint ) ? '&' : '?';\n\n\t// Prepend a \"?\" (or a \"&\") if a query is present, and return.\n\treturn ( queryString === '' ) ? '' : queryCharacter + queryString;\n};\n\n/**\n * Validate & assemble a path string from the request object's _path\n *\n * @private\n * @returns {String} The rendered path\n */\nWPRequest.prototype._renderPath = function() {\n\t// Call validatePath: if the provided path components are not well-formed,\n\t// an error will be thrown\n\tthis.validatePath();\n\n\tconst pathParts = this._path;\n\tconst orderedPathParts = Object.keys( pathParts )\n\t\t.sort( ( a, b ) => {\n\t\t\tconst intA = parseInt( a, 10 );\n\t\t\tconst intB = parseInt( b, 10 );\n\t\t\treturn intA - intB;\n\t\t} )\n\t\t.map( pathPartKey => pathParts[ pathPartKey ] );\n\n\t// Combine all parts of the path together, filtered to omit any components\n\t// that are unspecified or empty strings, to create the full path template\n\tconst path = [\n\t\tthis._namespace,\n\t].concat( orderedPathParts ).filter( identity ).join( '/' );\n\n\treturn path;\n};\n\n// Public Prototype Methods\n// ========================\n\n/**\n * Parse the request into a WordPress API request URI string\n *\n * @method\n * @returns {String} The URI for the HTTP request to be sent\n */\nWPRequest.prototype.toString = function() {\n\t// Render the path to a string\n\tconst path = this._renderPath();\n\n\t// Render the query string\n\tconst queryStr = this._renderQuery();\n\n\treturn this._options.endpoint + path + queryStr;\n};\n\n/**\n * Set a component of the resource URL itself (as opposed to a query parameter)\n *\n * If a path component has already been set at this level, throw an error:\n * requests are meant to be transient, so any re-writing of a previously-set\n * path part value is likely to be a mistake.\n *\n * @method\n * @chainable\n * @param {Number|String} level A \"level\" of the path to set, e.g. \"1\" or \"2\"\n * @param {Number|String} val   The value to set at that path part level\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.setPathPart = function( level, val ) {\n\tif ( this._path[ level ] ) {\n\t\tthrow new Error( 'Cannot overwrite value ' + this._path[ level ] );\n\t}\n\tthis._path[ level ] = val;\n\n\treturn this;\n};\n\n/**\n * Validate whether the specified path parts are valid for this endpoint\n *\n * \"Path parts\" are non-query-string URL segments, like \"some\" \"path\" in the URL\n * `mydomain.com/some/path?and=a&query=string&too`. Because a well-formed path\n * is necessary to execute a successful API request, we throw an error if the\n * user has omitted a value (such as `/some/[missing component]/url`) or has\n * provided a path part value that does not match the regular expression the\n * API uses to goven that segment.\n *\n * @method\n * @chainable\n * @returns {WPRequest} The WPRequest instance (for chaining), if no errors were found\n */\nWPRequest.prototype.validatePath = function() {\n\t// Iterate through all _specified_ levels of this endpoint\n\tconst specifiedLevels = Object.keys( this._path )\n\t\t.map( level => parseInt( level, 10 ) )\n\t\t.filter( pathPartKey => ! isNaN( pathPartKey ) );\n\n\tconst maxLevel = Math.max.apply( null, specifiedLevels );\n\n\t// Ensure that all necessary levels are specified\n\tconst path = [];\n\tlet valid = true;\n\n\tfor ( let level = 0; level <= maxLevel; level++ ) {\n\n\t\tif ( ! this._levels || ! this._levels[ level ] ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( this._path[ level ] ) {\n\t\t\t// Validate the provided path level against all available path validators\n\t\t\tvalidatePathLevel( this._levels[ level ], this._path[ level ] );\n\n\t\t\t// Add the path value to the array\n\t\t\tpath.push( this._path[ level ] );\n\t\t} else {\n\t\t\tpath.push( ' ??? ' );\n\t\t\tvalid = false;\n\t\t}\n\t}\n\n\tif ( ! valid ) {\n\t\tthrow new Error( 'Incomplete URL! Missing component: /' + path.join( '/' ) );\n\t}\n\n\treturn this;\n};\n\n/**\n * Set a parameter to render into the final query URI.\n *\n * @method\n * @chainable\n * @param {String|Object} props The name of the parameter to set, or an object containing\n *                              parameter keys and their corresponding values\n * @param {String|Number|Array} [value] The value of the parameter being set\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.param = function( props, value ) {\n\tif ( ! props || typeof props === 'string' && value === undefined ) {\n\t\t// We have no property to set, or no value to set for that property\n\t\treturn this;\n\t}\n\n\t// We can use the same iterator function below to handle explicit key-value\n\t// pairs if we convert them into to an object we can iterate over:\n\tif ( typeof props === 'string' ) {\n\t\tprops = keyValToObj( props, value );\n\t}\n\n\t// Iterate through the properties\n\tObject.keys( props ).forEach( ( key ) => {\n\t\tlet value = props[ key ];\n\n\t\t// Arrays should be de-duped and sorted\n\t\tif ( Array.isArray( value ) ) {\n\t\t\tvalue = unique( value ).sort( alphaNumericSort );\n\t\t}\n\n\t\t// Set the value\n\t\tthis._params[ key ] = value;\n\t} );\n\n\treturn this;\n};\n\n// Globally-applicable parameters that impact the shape of the request or response\n// ===============================================================================\n\n/**\n * Set the context of the request. Used primarily to expose private values on a\n * request object by setting the context to \"edit\".\n *\n * @method\n * @chainable\n * @param {String} context The context to set on the request\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.context = paramSetter( 'context' );\n\n/**\n * Convenience wrapper for `.context( 'edit' )`\n *\n * @method\n * @chainable\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.edit = function() {\n\treturn this.context( 'edit' );\n};\n\n/**\n * Return embedded resources as part of the response payload.\n *\n * @method\n * @chainable\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.embed = function() {\n\treturn this.param( '_embed', true );\n};\n\n// Parameters supported by all/nearly all default collections\n// ==========================================================\n\n/**\n * Set the pagination of a request. Use in conjunction with `.perPage()` for explicit\n * pagination handling. (The number of pages in a response can be retrieved from the\n * response's `_paging.totalPages` property.)\n *\n * @method\n * @chainable\n * @param {Number} pageNumber The page number of results to retrieve\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.page = paramSetter( 'page' );\n\n/**\n * Set the number of items to be returned in a page of responses.\n *\n * @method\n * @chainable\n * @param {Number} itemsPerPage The number of items to return in one page of results\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.perPage = paramSetter( 'per_page' );\n\n/**\n * Set an arbitrary offset to retrieve items from a specific point in a collection.\n *\n * @method\n * @chainable\n * @param {Number} offsetNumber The number of items by which to offset the response\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.offset = paramSetter( 'offset' );\n\n/**\n * Change the sort direction of a returned collection\n *\n * @example <caption>order comments chronologically (oldest first)</caption>\n *\n *     site.comments().order( 'asc' )...\n *\n * @method\n * @chainable\n * @param {String} direction The order to use when sorting the response\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.order = paramSetter( 'order' );\n\n/**\n * Order a collection by a specific field\n *\n * @method\n * @chainable\n * @param {String} field The field by which to order the response\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.orderby = paramSetter( 'orderby' );\n\n/**\n * Filter results to those matching the specified search terms.\n *\n * @method\n * @chainable\n * @param {String} searchString A string to search for within post content\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.search = paramSetter( 'search' );\n\n/**\n * Include specific resource IDs in the response collection.\n *\n * @method\n * @chainable\n * @param {Number|Number[]} ids An ID or array of IDs to include\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.include = paramSetter( 'include' );\n\n/**\n * Exclude specific resource IDs in the response collection.\n *\n * @method\n * @chainable\n * @param {Number|Number[]} ids An ID or array of IDs to exclude\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.exclude = paramSetter( 'exclude' );\n\n/**\n * Query a collection for members with a specific slug.\n *\n * @method\n * @chainable\n * @param {String} slug A post slug (slug), e.g. \"hello-world\"\n * @returns The request instance (for chaining)\n */\nWPRequest.prototype.slug = paramSetter( 'slug' );\n\n// HTTP Transport Prototype Methods\n// ================================\n\n// Chaining methods\n// ================\n\n/**\n * Set the namespace of the request, e.g. to specify the API root for routes\n * registered by wp core v2 (\"wp/v2\") or by any given plugin. Any previously-\n * set namespace will be overwritten by subsequent calls to the method.\n *\n * @method\n * @chainable\n * @param {String} namespace A namespace string, e.g. \"wp/v2\"\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.namespace = function( namespace ) {\n\tthis._namespace = namespace;\n\treturn this;\n};\n\n/**\n * Set a request to use authentication, and optionally provide auth credentials\n *\n * If auth credentials were already specified when the WPAPI instance was created, calling\n * `.auth` on the request chain will set that request to use the existing credentials:\n *\n * @example <caption>use existing credentials</caption>\n *\n *     request.auth().get...\n *\n * Alternatively, a username & password (or nonce) can be explicitly passed into `.auth`:\n *\n * @example <caption>use explicit basic authentication credentials</caption>\n *\n *     request.auth({\n *       username: 'admin',\n *       password: 'super secure'\n *     }).get...\n *\n * @example <caption>use a nonce for cookie authentication</caption>\n *\n *     request.auth({\n *       nonce: 'somenonce'\n *     })...\n *\n * @method\n * @chainable\n * @param {Object} credentials            An object with 'username' and 'password' string\n *                                        properties, or else a 'nonce' property\n * @param {String} [credentials.username] A WP-API Basic HTTP Authentication username\n * @param {String} [credentials.password] A WP-API Basic HTTP Authentication password\n * @param {String} [credentials.nonce]    A WP nonce for use with cookie authentication\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.auth = function( credentials ) {\n\tif ( typeof credentials === 'object' ) {\n\t\tif ( typeof credentials.username === 'string' ) {\n\t\t\tthis._options.username = credentials.username;\n\t\t}\n\n\t\tif ( typeof credentials.password === 'string' ) {\n\t\t\tthis._options.password = credentials.password;\n\t\t}\n\n\t\tif ( credentials.nonce ) {\n\t\t\tthis._options.nonce = credentials.nonce;\n\t\t}\n\t}\n\n\t// Set the \"auth\" options flag that will force authentication on this request\n\tthis._options.auth = true;\n\n\treturn this;\n};\n\n/**\n * Specify a file or a file buffer to attach to the request, for use when\n * creating a new Media item\n *\n * @example <caption>within a server context</caption>\n *\n *     wp.media()\n *       // Pass .file() the file system path to a file to upload\n *       .file( '/path/to/file.jpg' )\n *       .create({})...\n *\n * @example <caption>within a browser context</caption>\n *\n *     wp.media()\n *       // Pass .file() the file reference from an HTML file input\n *       .file( document.querySelector( 'input[type=\"file\"]' ).files[0] )\n *       .create({})...\n *\n * @method\n * @chainable\n * @param {string|object} file   A path to a file (in Node) or an file object\n *                               (Node or Browser) to attach to the request\n * @param {string}        [name] An (optional) filename to use for the file\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.file = function( file, name ) {\n\tthis._attachment = file;\n\t// Explicitly set to undefined if not provided, to override any previously-\n\t// set attachment name property that might exist from a prior `.file()` call\n\tthis._attachmentName = name ? name : undefined;\n\treturn this;\n};\n\n// HTTP Methods: Public Interface\n// ==============================\n\n/**\n * Specify one or more headers to send with the dispatched HTTP request.\n *\n * @example <caption>Set a single header to be used on this request</caption>\n *\n *     request.setHeaders( 'Authorization', 'Bearer trustme' )...\n *\n * @example <caption>Set multiple headers to be used by this request</caption>\n *\n *     request.setHeaders({\n *       Authorization: 'Bearer comeonwereoldfriendsright',\n *       'Accept-Language': 'en-CA'\n *     })...\n *\n * @since 1.1.0\n * @method\n * @chainable\n * @param {String|Object} headers The name of the header to set, or an object of\n *                                header names and their associated string values\n * @param {String}        [value] The value of the header being set\n * @returns {WPRequest} The WPRequest instance (for chaining)\n */\nWPRequest.prototype.setHeaders = function( headers, value ) {\n\t// We can use the same iterator function below to handle explicit key-value\n\t// pairs if we convert them into to an object we can iterate over:\n\tif ( typeof headers === 'string' ) {\n\t\theaders = keyValToObj( headers, value );\n\t}\n\n\tthis._options.headers = {\n\t\t...( this._options.headers || {} ),\n\t\t...headers,\n\t};\n\n\treturn this;\n};\n\n/**\n * Get (download the data for) the specified resource\n *\n * @method\n * @async\n * @param {Function} [callback] A callback to invoke with the results of the GET request\n * @returns {Promise} A promise to the results of the HTTP request\n */\nWPRequest.prototype.get = function( callback ) {\n\treturn this.transport.get( this, callback );\n};\n\n/**\n * Get the headers for the specified resource\n *\n * @method\n * @async\n * @param {Function} [callback] A callback to invoke with the results of the HEAD request\n * @returns {Promise} A promise to the header results of the HTTP request\n */\nWPRequest.prototype.headers = function( callback ) {\n\treturn this.transport.head( this, callback );\n};\n\n/**\n * Create the specified resource with the provided data\n *\n * This is the public interface for creating POST requests\n *\n * @method\n * @async\n * @param {Object} data The data for the POST request\n * @param {Function} [callback] A callback to invoke with the results of the POST request\n * @returns {Promise} A promise to the results of the HTTP request\n */\nWPRequest.prototype.create = function( data, callback ) {\n\treturn this.transport.post( this, data, callback );\n};\n\n/**\n * Update the specified resource with the provided data\n *\n * This is the public interface for creating PUT requests\n *\n * @method\n * @async\n * @private\n * @param {Object} data The data for the PUT request\n * @param {Function} [callback] A callback to invoke with the results of the PUT request\n * @returns {Promise} A promise to the results of the HTTP request\n */\nWPRequest.prototype.update = function( data, callback ) {\n\treturn this.transport.put( this, data, callback );\n};\n\n/**\n * Delete the specified resource\n *\n * @method\n * @async\n * @param {Object} [data] Data to send along with the DELETE request\n * @param {Function} [callback] A callback to invoke with the results of the DELETE request\n * @returns {Promise} A promise to the results of the HTTP request\n */\nWPRequest.prototype.delete = function( data, callback ) {\n\treturn this.transport.delete( this, data, callback );\n};\n\n/**\n * Calling .then on a query chain will invoke the query as a GET and return a promise\n *\n * @method\n * @async\n * @param {Function} [successCallback] A callback to handle the data returned from the GET request\n * @param {Function} [failureCallback] A callback to handle any errors encountered by the request\n * @returns {Promise} A promise to the results of the HTTP request\n */\nWPRequest.prototype.then = function( successCallback, failureCallback ) {\n\treturn this.transport.get( this ).then( successCallback, failureCallback );\n};\n\nmodule.exports = WPRequest;\n"]},"metadata":{},"sourceType":"script"}