{"ast":null,"code":"/**\n * @module resource-handler-spec\n */\n'use strict';\n\nconst createPathPartSetter = require('./path-part-setter').create;\n/** @private */\n\n\nfunction addLevelOption(levelsObj, level, obj) {\n  levelsObj[level] = levelsObj[level] || [];\n  levelsObj[level].push(obj);\n}\n/**\n * Assign a setter function for the provided node to the provided route\n * handler object setters dictionary (mutates handler by reference).\n *\n * @private\n * @param {Object} handler A route handler definition object\n * @param {Object} node    A route hierarchy level node object\n */\n\n\nfunction assignSetterFnForNode(handler, node) {\n  let setterFn; // For each node, add its handler to the relevant \"level\" representation\n\n  addLevelOption(handler._levels, node.level, {\n    component: node.component,\n    validate: node.validate,\n    methods: node.methods\n  }); // First level is set implicitly, no dedicated setter needed\n\n  if (node.level > 0) {\n    setterFn = createPathPartSetter(node);\n    node.names.forEach(name => {\n      // Convert from snake_case to camelCase\n      const setterFnName = name.replace(/[_-]+\\w/g, match => match.replace(/[_-]+/, '').toUpperCase()); // Don't overwrite previously-set methods\n\n      if (!handler._setters[setterFnName]) {\n        handler._setters[setterFnName] = setterFn;\n      }\n    });\n  }\n}\n/**\n * Walk the tree of a specific resource node to create the setter methods\n *\n * The API we want to produce from the node tree looks like this:\n *\n *     wp.posts();                        /wp/v2/posts\n *     wp.posts().id( 7 );                /wp/v2/posts/7\n *     wp.posts().id( 7 ).revisions();    /wp/v2/posts/7/revisions\n *     wp.posts().id( 7 ).revisions( 8 ); /wp/v2/posts/7/revisions/8\n *\n * ^ That last one's the tricky one: we can deduce that this parameter is \"id\", but\n * that param will already be taken by the post ID, so sub-collections have to be\n * set up as `.revisions()` to get the collection, and `.revisions( id )` to get a\n * specific resource.\n *\n * @private\n * @param  {Object} node            A node object\n * @param  {Object} [node.children] An object of child nodes\n * // @returns {isLeaf} A boolean indicating whether the processed node is a leaf\n */\n\n\nfunction extractSetterFromNode(handler, node) {\n  assignSetterFnForNode(handler, node);\n\n  if (node.children) {\n    // Recurse down to this node's children\n    Object.keys(node.children).forEach(key => {\n      extractSetterFromNode(handler, node.children[key]);\n    });\n  }\n}\n/**\n * Create a node handler specification object from a route definition object\n *\n * @name create\n * @param {object} routeDefinition A route definition object\n * @param {string} resource The string key of the resource for which to create a handler\n * @returns {object} A handler spec object with _path, _levels and _setters properties\n */\n\n\nfunction createNodeHandlerSpec(routeDefinition, resource) {\n  const handler = {\n    // A \"path\" is an ordered (by key) set of values composed into the final URL\n    _path: {\n      '0': resource\n    },\n    // A \"level\" is a level-keyed object representing the valid options for\n    // one level of the resource URL\n    _levels: {},\n    // Objects that hold methods and properties which will be copied to\n    // instances of this endpoint's handler\n    _setters: {},\n    // Arguments (query parameters) that may be set in GET requests to endpoints\n    // nested within this resource route tree, used to determine the mixins to\n    // add to the request handler\n    _getArgs: routeDefinition._getArgs\n  }; // Walk the tree\n\n  Object.keys(routeDefinition).forEach(routeDefProp => {\n    if (routeDefProp !== '_getArgs') {\n      extractSetterFromNode(handler, routeDefinition[routeDefProp]);\n    }\n  });\n  return handler;\n}\n\nmodule.exports = {\n  create: createNodeHandlerSpec\n};","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/resource-handler-spec.js"],"names":["createPathPartSetter","require","create","addLevelOption","levelsObj","level","obj","push","assignSetterFnForNode","handler","node","setterFn","_levels","component","validate","methods","names","forEach","name","setterFnName","replace","match","toUpperCase","_setters","extractSetterFromNode","children","Object","keys","key","createNodeHandlerSpec","routeDefinition","resource","_path","_getArgs","routeDefProp","module","exports"],"mappings":"AAAA;;;AAGA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAE,oBAAF,CAAP,CAAgCC,MAA7D;AAEA;;;AACA,SAASC,cAAT,CAAyBC,SAAzB,EAAoCC,KAApC,EAA2CC,GAA3C,EAAiD;AAChDF,EAAAA,SAAS,CAAEC,KAAF,CAAT,GAAqBD,SAAS,CAAEC,KAAF,CAAT,IAAsB,EAA3C;AACAD,EAAAA,SAAS,CAAEC,KAAF,CAAT,CAAmBE,IAAnB,CAAyBD,GAAzB;AACA;AAED;;;;;;;;;;AAQA,SAASE,qBAAT,CAAgCC,OAAhC,EAAyCC,IAAzC,EAAgD;AAC/C,MAAIC,QAAJ,CAD+C,CAG/C;;AACAR,EAAAA,cAAc,CAAEM,OAAO,CAACG,OAAV,EAAmBF,IAAI,CAACL,KAAxB,EAA+B;AAC5CQ,IAAAA,SAAS,EAAEH,IAAI,CAACG,SAD4B;AAE5CC,IAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAF6B;AAG5CC,IAAAA,OAAO,EAAEL,IAAI,CAACK;AAH8B,GAA/B,CAAd,CAJ+C,CAU/C;;AACA,MAAKL,IAAI,CAACL,KAAL,GAAa,CAAlB,EAAsB;AAErBM,IAAAA,QAAQ,GAAGX,oBAAoB,CAAEU,IAAF,CAA/B;AAEAA,IAAAA,IAAI,CAACM,KAAL,CAAWC,OAAX,CAAsBC,IAAF,IAAY;AAC/B;AACA,YAAMC,YAAY,GAAGD,IAAI,CAACE,OAAL,CACpB,UADoB,EAEpBC,KAAK,IAAIA,KAAK,CAACD,OAAN,CAAe,OAAf,EAAwB,EAAxB,EAA6BE,WAA7B,EAFW,CAArB,CAF+B,CAO/B;;AACA,UAAK,CAAEb,OAAO,CAACc,QAAR,CAAkBJ,YAAlB,CAAP,EAA0C;AACzCV,QAAAA,OAAO,CAACc,QAAR,CAAkBJ,YAAlB,IAAmCR,QAAnC;AACA;AACD,KAXD;AAYA;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASa,qBAAT,CAAgCf,OAAhC,EAAyCC,IAAzC,EAAgD;AAE/CF,EAAAA,qBAAqB,CAAEC,OAAF,EAAWC,IAAX,CAArB;;AAEA,MAAKA,IAAI,CAACe,QAAV,EAAqB;AACpB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAajB,IAAI,CAACe,QAAlB,EAA6BR,OAA7B,CAAwCW,GAAF,IAAW;AAChDJ,MAAAA,qBAAqB,CAAEf,OAAF,EAAWC,IAAI,CAACe,QAAL,CAAeG,GAAf,CAAX,CAArB;AACA,KAFD;AAGA;AACD;AAED;;;;;;;;;;AAQA,SAASC,qBAAT,CAAgCC,eAAhC,EAAiDC,QAAjD,EAA4D;AAE3D,QAAMtB,OAAO,GAAG;AACf;AACAuB,IAAAA,KAAK,EAAE;AACN,WAAKD;AADC,KAFQ;AAMf;AACA;AACAnB,IAAAA,OAAO,EAAE,EARM;AAUf;AACA;AACAW,IAAAA,QAAQ,EAAE,EAZK;AAcf;AACA;AACA;AACAU,IAAAA,QAAQ,EAAEH,eAAe,CAACG;AAjBX,GAAhB,CAF2D,CAsB3D;;AACAP,EAAAA,MAAM,CAACC,IAAP,CAAaG,eAAb,EAA+Bb,OAA/B,CAA0CiB,YAAF,IAAoB;AAC3D,QAAKA,YAAY,KAAK,UAAtB,EAAmC;AAClCV,MAAAA,qBAAqB,CAAEf,OAAF,EAAWqB,eAAe,CAAEI,YAAF,CAA1B,CAArB;AACA;AACD,GAJD;AAMA,SAAOzB,OAAP;AACA;;AAED0B,MAAM,CAACC,OAAP,GAAiB;AAChBlC,EAAAA,MAAM,EAAE2B;AADQ,CAAjB","sourcesContent":["/**\n * @module resource-handler-spec\n */\n'use strict';\n\nconst createPathPartSetter = require( './path-part-setter' ).create;\n\n/** @private */\nfunction addLevelOption( levelsObj, level, obj ) {\n\tlevelsObj[ level ] = levelsObj[ level ] || [];\n\tlevelsObj[ level ].push( obj );\n}\n\n/**\n * Assign a setter function for the provided node to the provided route\n * handler object setters dictionary (mutates handler by reference).\n *\n * @private\n * @param {Object} handler A route handler definition object\n * @param {Object} node    A route hierarchy level node object\n */\nfunction assignSetterFnForNode( handler, node ) {\n\tlet setterFn;\n\n\t// For each node, add its handler to the relevant \"level\" representation\n\taddLevelOption( handler._levels, node.level, {\n\t\tcomponent: node.component,\n\t\tvalidate: node.validate,\n\t\tmethods: node.methods,\n\t} );\n\n\t// First level is set implicitly, no dedicated setter needed\n\tif ( node.level > 0 ) {\n\n\t\tsetterFn = createPathPartSetter( node );\n\n\t\tnode.names.forEach( ( name ) => {\n\t\t\t// Convert from snake_case to camelCase\n\t\t\tconst setterFnName = name.replace(\n\t\t\t\t/[_-]+\\w/g,\n\t\t\t\tmatch => match.replace( /[_-]+/, '' ).toUpperCase()\n\t\t\t);\n\n\t\t\t// Don't overwrite previously-set methods\n\t\t\tif ( ! handler._setters[ setterFnName ] ) {\n\t\t\t\thandler._setters[ setterFnName ] = setterFn;\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Walk the tree of a specific resource node to create the setter methods\n *\n * The API we want to produce from the node tree looks like this:\n *\n *     wp.posts();                        /wp/v2/posts\n *     wp.posts().id( 7 );                /wp/v2/posts/7\n *     wp.posts().id( 7 ).revisions();    /wp/v2/posts/7/revisions\n *     wp.posts().id( 7 ).revisions( 8 ); /wp/v2/posts/7/revisions/8\n *\n * ^ That last one's the tricky one: we can deduce that this parameter is \"id\", but\n * that param will already be taken by the post ID, so sub-collections have to be\n * set up as `.revisions()` to get the collection, and `.revisions( id )` to get a\n * specific resource.\n *\n * @private\n * @param  {Object} node            A node object\n * @param  {Object} [node.children] An object of child nodes\n * // @returns {isLeaf} A boolean indicating whether the processed node is a leaf\n */\nfunction extractSetterFromNode( handler, node ) {\n\n\tassignSetterFnForNode( handler, node );\n\n\tif ( node.children ) {\n\t\t// Recurse down to this node's children\n\t\tObject.keys( node.children ).forEach( ( key ) => {\n\t\t\textractSetterFromNode( handler, node.children[ key ] );\n\t\t} );\n\t}\n}\n\n/**\n * Create a node handler specification object from a route definition object\n *\n * @name create\n * @param {object} routeDefinition A route definition object\n * @param {string} resource The string key of the resource for which to create a handler\n * @returns {object} A handler spec object with _path, _levels and _setters properties\n */\nfunction createNodeHandlerSpec( routeDefinition, resource ) {\n\n\tconst handler = {\n\t\t// A \"path\" is an ordered (by key) set of values composed into the final URL\n\t\t_path: {\n\t\t\t'0': resource,\n\t\t},\n\n\t\t// A \"level\" is a level-keyed object representing the valid options for\n\t\t// one level of the resource URL\n\t\t_levels: {},\n\n\t\t// Objects that hold methods and properties which will be copied to\n\t\t// instances of this endpoint's handler\n\t\t_setters: {},\n\n\t\t// Arguments (query parameters) that may be set in GET requests to endpoints\n\t\t// nested within this resource route tree, used to determine the mixins to\n\t\t// add to the request handler\n\t\t_getArgs: routeDefinition._getArgs,\n\t};\n\n\t// Walk the tree\n\tObject.keys( routeDefinition ).forEach( ( routeDefProp ) => {\n\t\tif ( routeDefProp !== '_getArgs' ) {\n\t\t\textractSetterFromNode( handler, routeDefinition[ routeDefProp ] );\n\t\t}\n\t} );\n\n\treturn handler;\n}\n\nmodule.exports = {\n\tcreate: createNodeHandlerSpec,\n};\n"]},"metadata":{},"sourceType":"script"}