{"ast":null,"code":"/**\n * @module mixins/filters\n */\n'use strict';\n\nconst alphaNumericSort = require('../util/alphanumeric-sort');\n\nconst keyValToObj = require('../util/key-val-to-obj');\n\nconst unique = require('../util/unique');\n/**\n * Filter methods that can be mixed in to a request constructor's prototype to\n * allow that request to take advantage of the `?filter[]=` aliases for WP_Query\n * parameters for collection endpoints, when available.\n *\n * @mixin filters\n */\n\n\nconst filterMixins = {}; // Filter Methods\n// ==============\n\n/**\n * Specify key-value pairs by which to filter the API results (commonly used\n * to retrieve only posts meeting certain criteria, such as posts within a\n * particular category or by a particular author).\n *\n * @example\n *\n *     // Set a single property:\n *     wp.filter( 'post_type', 'cpt_event' )...\n *\n *     // Set multiple properties at once:\n *     wp.filter({\n *         post_status: 'publish',\n *         category_name: 'news'\n *     })...\n *\n *     // Chain calls to .filter():\n *     wp.filter( 'post_status', 'publish' ).filter( 'category_name', 'news' )...\n *\n * @method filter\n * @chainable\n * @param {String|Object} props A filter property name string, or object of name/value pairs\n * @param {String|Number|Array} [value] The value(s) corresponding to the provided filter property\n * @returns The request instance (for chaining)\n */\n\nfilterMixins.filter = function (props, value) {\n  if (!props || typeof props === 'string' && value === undefined) {\n    // We have no filter to set, or no value to set for that filter\n    return this;\n  } // convert the property name string `props` and value `value` into an object\n\n\n  if (typeof props === 'string') {\n    props = keyValToObj(props, value);\n  }\n\n  this._filters = { ...this._filters,\n    ...props\n  };\n  return this;\n};\n/**\n * Restrict the query results to posts matching one or more taxonomy terms.\n *\n * @method taxonomy\n * @chainable\n * @param {String} taxonomy The name of the taxonomy to filter by\n * @param {String|Number|Array} term A string or integer, or array thereof, representing terms\n * @returns The request instance (for chaining)\n */\n\n\nfilterMixins.taxonomy = function (taxonomy, term) {\n  const termIsArray = Array.isArray(term);\n  const termIsNumber = termIsArray ? term.reduce((allAreNumbers, term) => allAreNumbers && typeof term === 'number', true) : typeof term === 'number';\n  const termIsString = termIsArray ? term.reduce((allAreStrings, term) => allAreStrings && typeof term === 'string', true) : typeof term === 'string';\n\n  if (!termIsString && !termIsNumber) {\n    throw new Error('term must be a number, string, or array of numbers or strings');\n  }\n\n  if (taxonomy === 'category') {\n    if (termIsString) {\n      // Query param for filtering by category slug is \"category_name\"\n      taxonomy = 'category_name';\n    } else {\n      // The boolean check above ensures that if taxonomy === 'category' and\n      // term is not a string, then term must be a number and therefore an ID:\n      // Query param for filtering by category ID is \"cat\"\n      taxonomy = 'cat';\n    }\n  } else if (taxonomy === 'post_tag') {\n    // tag is used in place of post_tag in the public query variables\n    taxonomy = 'tag';\n  } // Ensure the taxonomy filters object is available\n\n\n  this._taxonomyFilters = this._taxonomyFilters || {}; // Ensure there's an array of terms available for this taxonomy\n\n  const taxonomyTerms = (this._taxonomyFilters[taxonomy] || []). // Insert the provided terms into the specified taxonomy's terms array\n  concat(term) // Sort array\n  .sort(alphaNumericSort); // De-dupe\n\n  this._taxonomyFilters[taxonomy] = unique(taxonomyTerms, true);\n  return this;\n};\n/**\n * Query for posts published in a given year.\n *\n * @method year\n * @chainable\n * @param {Number} year integer representation of year requested\n * @returns The request instance (for chaining)\n */\n\n\nfilterMixins.year = function (year) {\n  return filterMixins.filter.call(this, 'year', year);\n};\n/**\n * Query for posts published in a given month, either by providing the number\n * of the requested month (e.g. 3), or the month's name as a string (e.g. \"March\")\n *\n * @method month\n * @chainable\n * @param {Number|String} month Integer for month (1) or month string (\"January\")\n * @returns The request instance (for chaining)\n */\n\n\nfilterMixins.month = function (month) {\n  let monthDate;\n\n  if (typeof month === 'string') {\n    // Append a arbitrary day and year to the month to parse the string into a Date\n    monthDate = new Date(Date.parse(month + ' 1, 2012')); // If the generated Date is NaN, then the passed string is not a valid month\n\n    if (isNaN(monthDate)) {\n      return this;\n    } // JS Dates are 0 indexed, but the WP API requires a 1-indexed integer\n\n\n    month = monthDate.getMonth() + 1;\n  } // If month is a Number, add the monthnum filter to the request\n\n\n  if (typeof month === 'number') {\n    return filterMixins.filter.call(this, 'monthnum', month);\n  }\n\n  return this;\n};\n/**\n * Add the day filter into the request to retrieve posts for a given day\n *\n * @method day\n * @chainable\n * @param {Number} day Integer representation of the day requested\n * @returns The request instance (for chaining)\n */\n\n\nfilterMixins.day = function (day) {\n  return filterMixins.filter.call(this, 'day', day);\n};\n/**\n * Specify that we are requesting a page by its path (specific to Page resources)\n *\n * @method path\n * @chainable\n * @param {String} path The root-relative URL path for a page\n * @returns The request instance (for chaining)\n */\n\n\nfilterMixins.path = function (path) {\n  return filterMixins.filter.call(this, 'pagename', path);\n};\n\nmodule.exports = filterMixins;","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/mixins/filters.js"],"names":["alphaNumericSort","require","keyValToObj","unique","filterMixins","filter","props","value","undefined","_filters","taxonomy","term","termIsArray","Array","isArray","termIsNumber","reduce","allAreNumbers","termIsString","allAreStrings","Error","_taxonomyFilters","taxonomyTerms","concat","sort","year","call","month","monthDate","Date","parse","isNaN","getMonth","day","path","module","exports"],"mappings":"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","sourcesContent":["/**\n * @module mixins/filters\n */\n'use strict';\n\nconst alphaNumericSort = require( '../util/alphanumeric-sort' );\nconst keyValToObj = require( '../util/key-val-to-obj' );\nconst unique = require( '../util/unique' );\n\n/**\n * Filter methods that can be mixed in to a request constructor's prototype to\n * allow that request to take advantage of the `?filter[]=` aliases for WP_Query\n * parameters for collection endpoints, when available.\n *\n * @mixin filters\n */\nconst filterMixins = {};\n\n// Filter Methods\n// ==============\n\n/**\n * Specify key-value pairs by which to filter the API results (commonly used\n * to retrieve only posts meeting certain criteria, such as posts within a\n * particular category or by a particular author).\n *\n * @example\n *\n *     // Set a single property:\n *     wp.filter( 'post_type', 'cpt_event' )...\n *\n *     // Set multiple properties at once:\n *     wp.filter({\n *         post_status: 'publish',\n *         category_name: 'news'\n *     })...\n *\n *     // Chain calls to .filter():\n *     wp.filter( 'post_status', 'publish' ).filter( 'category_name', 'news' )...\n *\n * @method filter\n * @chainable\n * @param {String|Object} props A filter property name string, or object of name/value pairs\n * @param {String|Number|Array} [value] The value(s) corresponding to the provided filter property\n * @returns The request instance (for chaining)\n */\nfilterMixins.filter = function( props, value ) {\n\tif ( ! props || typeof props === 'string' && value === undefined ) {\n\t\t// We have no filter to set, or no value to set for that filter\n\t\treturn this;\n\t}\n\n\t// convert the property name string `props` and value `value` into an object\n\tif ( typeof props === 'string' ) {\n\t\tprops = keyValToObj( props, value );\n\t}\n\n\tthis._filters = {\n\t\t...this._filters,\n\t\t...props,\n\t};\n\n\treturn this;\n};\n\n/**\n * Restrict the query results to posts matching one or more taxonomy terms.\n *\n * @method taxonomy\n * @chainable\n * @param {String} taxonomy The name of the taxonomy to filter by\n * @param {String|Number|Array} term A string or integer, or array thereof, representing terms\n * @returns The request instance (for chaining)\n */\nfilterMixins.taxonomy = function( taxonomy, term ) {\n\tconst termIsArray = Array.isArray( term );\n\n\tconst termIsNumber = termIsArray ?\n\t\tterm.reduce(\n\t\t\t( allAreNumbers, term ) => allAreNumbers && typeof term === 'number',\n\t\t\ttrue\n\t\t) :\n\t\ttypeof term === 'number';\n\n\tconst termIsString = termIsArray ?\n\t\tterm.reduce(\n\t\t\t( allAreStrings, term ) => allAreStrings && typeof term === 'string',\n\t\t\ttrue\n\t\t) :\n\t\ttypeof term === 'string';\n\n\tif ( ! termIsString && ! termIsNumber ) {\n\t\tthrow new Error( 'term must be a number, string, or array of numbers or strings' );\n\t}\n\n\tif ( taxonomy === 'category' ) {\n\t\tif ( termIsString ) {\n\t\t\t// Query param for filtering by category slug is \"category_name\"\n\t\t\ttaxonomy = 'category_name';\n\t\t} else {\n\t\t\t// The boolean check above ensures that if taxonomy === 'category' and\n\t\t\t// term is not a string, then term must be a number and therefore an ID:\n\t\t\t// Query param for filtering by category ID is \"cat\"\n\t\t\ttaxonomy = 'cat';\n\t\t}\n\t} else if ( taxonomy === 'post_tag' ) {\n\t\t// tag is used in place of post_tag in the public query variables\n\t\ttaxonomy = 'tag';\n\t}\n\n\t// Ensure the taxonomy filters object is available\n\tthis._taxonomyFilters = this._taxonomyFilters || {};\n\n\t// Ensure there's an array of terms available for this taxonomy\n\tconst taxonomyTerms = ( this._taxonomyFilters[ taxonomy ] || [] )\n\t\t// Insert the provided terms into the specified taxonomy's terms array\n\t\t.concat( term )\n\t\t// Sort array\n\t\t.sort( alphaNumericSort );\n\n\t// De-dupe\n\tthis._taxonomyFilters[ taxonomy ] = unique( taxonomyTerms, true );\n\n\treturn this;\n};\n\n/**\n * Query for posts published in a given year.\n *\n * @method year\n * @chainable\n * @param {Number} year integer representation of year requested\n * @returns The request instance (for chaining)\n */\nfilterMixins.year = function( year ) {\n\treturn filterMixins.filter.call( this, 'year', year );\n};\n\n/**\n * Query for posts published in a given month, either by providing the number\n * of the requested month (e.g. 3), or the month's name as a string (e.g. \"March\")\n *\n * @method month\n * @chainable\n * @param {Number|String} month Integer for month (1) or month string (\"January\")\n * @returns The request instance (for chaining)\n */\nfilterMixins.month = function( month ) {\n\tlet monthDate;\n\tif ( typeof month === 'string' ) {\n\t\t// Append a arbitrary day and year to the month to parse the string into a Date\n\t\tmonthDate = new Date( Date.parse( month + ' 1, 2012' ) );\n\n\t\t// If the generated Date is NaN, then the passed string is not a valid month\n\t\tif ( isNaN( monthDate ) ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// JS Dates are 0 indexed, but the WP API requires a 1-indexed integer\n\t\tmonth = monthDate.getMonth() + 1;\n\t}\n\n\t// If month is a Number, add the monthnum filter to the request\n\tif ( typeof month === 'number' ) {\n\t\treturn filterMixins.filter.call( this, 'monthnum', month );\n\t}\n\n\treturn this;\n};\n\n/**\n * Add the day filter into the request to retrieve posts for a given day\n *\n * @method day\n * @chainable\n * @param {Number} day Integer representation of the day requested\n * @returns The request instance (for chaining)\n */\nfilterMixins.day = function( day ) {\n\treturn filterMixins.filter.call( this, 'day', day );\n};\n\n/**\n * Specify that we are requesting a page by its path (specific to Page resources)\n *\n * @method path\n * @chainable\n * @param {String} path The root-relative URL path for a page\n * @returns The request instance (for chaining)\n */\nfilterMixins.path = function( path ) {\n\treturn filterMixins.filter.call( this, 'pagename', path );\n};\n\nmodule.exports = filterMixins;\n"]},"metadata":{},"sourceType":"script"}