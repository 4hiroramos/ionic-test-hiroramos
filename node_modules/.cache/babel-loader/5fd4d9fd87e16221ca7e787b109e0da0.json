{"ast":null,"code":"'use strict';\n/**\n * Augment an object (specifically a prototype) with a mixin method\n * (the provided object is mutated by reference)\n *\n * @module util/apply-mixin\n * @param {Object} obj The object (usually a prototype) to augment\n * @param {String} key The property to which the mixin method should be assigned\n * @param {Function} mixin The mixin method\n * @returns {void}\n */\n\nmodule.exports = (obj, key, mixin) => {\n  // Will not overwrite existing methods\n  if (typeof mixin === 'function' && !obj[key]) {\n    obj[key] = mixin;\n  }\n};","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/util/apply-mixin.js"],"names":["module","exports","obj","key","mixin"],"mappings":"AAAA;AAEA;;;;;;;;;;;AAUAA,MAAM,CAACC,OAAP,GAAiB,CAAEC,GAAF,EAAOC,GAAP,EAAYC,KAAZ,KAAuB;AACvC;AACA,MAAK,OAAOA,KAAP,KAAiB,UAAjB,IAA+B,CAAEF,GAAG,CAAEC,GAAF,CAAzC,EAAmD;AAClDD,IAAAA,GAAG,CAAEC,GAAF,CAAH,GAAaC,KAAb;AACA;AACD,CALD","sourcesContent":["'use strict';\n\n/**\n * Augment an object (specifically a prototype) with a mixin method\n * (the provided object is mutated by reference)\n *\n * @module util/apply-mixin\n * @param {Object} obj The object (usually a prototype) to augment\n * @param {String} key The property to which the mixin method should be assigned\n * @param {Function} mixin The mixin method\n * @returns {void}\n */\nmodule.exports = ( obj, key, mixin ) => {\n\t// Will not overwrite existing methods\n\tif ( typeof mixin === 'function' && ! obj[ key ] ) {\n\t\tobj[ key ] = mixin;\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}