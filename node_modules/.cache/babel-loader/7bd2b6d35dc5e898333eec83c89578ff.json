{"ast":null,"code":"/**\n * Take a WP route string (with PCRE named capture groups), `such as /author/(?P<id>\\d+)`,\n * and generate request handler factory methods for each represented endpoint.\n *\n * @module endpoint-factories\n */\n'use strict';\n\nconst createResourceHandlerSpec = require('./resource-handler-spec').create;\n\nconst createEndpointRequest = require('./endpoint-request').create;\n\nconst objectReduce = require('./util/object-reduce');\n/**\n * Given an array of route definitions and a specific namespace for those routes,\n * recurse through the node tree representing all possible routes within the\n * provided namespace to define path value setters (and corresponding property\n * validators) for all possible variants of each resource's API endpoints.\n *\n * @method generate\n * @param {string} namespace         The namespace string for these routes\n * @param {object} routesByNamespace A dictionary of namespace - route definition\n *                                   object pairs as generated from buildRouteTree,\n *                                   where each route definition object is a dictionary\n *                                   keyed by route definition strings\n * @returns {object} A dictionary of endpoint request handler factories\n */\n\n\nfunction generateEndpointFactories(routesByNamespace) {\n  return objectReduce(routesByNamespace, (namespaces, routeDefinitions, namespace) => {\n    // Create\n    namespaces[namespace] = objectReduce(routeDefinitions, (handlers, routeDef, resource) => {\n      const handlerSpec = createResourceHandlerSpec(routeDef, resource);\n      const EndpointRequest = createEndpointRequest(handlerSpec, resource, namespace); // \"handler\" object is now fully prepared; create the factory method that\n      // will instantiate and return a handler instance\n\n      handlers[resource] = function (options) {\n        return new EndpointRequest({ ...this._options,\n          ...options\n        });\n      }; // Expose the constructor as a property on the factory function, so that\n      // auto-generated endpoint request constructors may be further customized\n      // when needed\n\n\n      handlers[resource].Ctor = EndpointRequest;\n      return handlers;\n    }, {});\n    return namespaces;\n  }, {});\n}\n\nmodule.exports = {\n  generate: generateEndpointFactories\n};","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/endpoint-factories.js"],"names":["createResourceHandlerSpec","require","create","createEndpointRequest","objectReduce","generateEndpointFactories","routesByNamespace","namespaces","routeDefinitions","namespace","handlers","routeDef","resource","handlerSpec","EndpointRequest","options","_options","Ctor","module","exports","generate"],"mappings":"AAAA;;;;;;AAMA;;AAEA,MAAMA,yBAAyB,GAAGC,OAAO,CAAE,yBAAF,CAAP,CAAqCC,MAAvE;;AACA,MAAMC,qBAAqB,GAAGF,OAAO,CAAE,oBAAF,CAAP,CAAgCC,MAA9D;;AACA,MAAME,YAAY,GAAGH,OAAO,CAAE,sBAAF,CAA5B;AAEA;;;;;;;;;;;;;;;;AAcA,SAASI,yBAAT,CAAoCC,iBAApC,EAAwD;AAEvD,SAAOF,YAAY,CAAEE,iBAAF,EAAqB,CAAEC,UAAF,EAAcC,gBAAd,EAAgCC,SAAhC,KAA+C;AAEtF;AACAF,IAAAA,UAAU,CAAEE,SAAF,CAAV,GAA0BL,YAAY,CAAEI,gBAAF,EAAoB,CAAEE,QAAF,EAAYC,QAAZ,EAAsBC,QAAtB,KAAoC;AAE7F,YAAMC,WAAW,GAAGb,yBAAyB,CAAEW,QAAF,EAAYC,QAAZ,CAA7C;AAEA,YAAME,eAAe,GAAGX,qBAAqB,CAAEU,WAAF,EAAeD,QAAf,EAAyBH,SAAzB,CAA7C,CAJ6F,CAM7F;AACA;;AACAC,MAAAA,QAAQ,CAAEE,QAAF,CAAR,GAAuB,UAAUG,OAAV,EAAoB;AAC1C,eAAO,IAAID,eAAJ,CAAqB,EAC3B,GAAG,KAAKE,QADmB;AAE3B,aAAGD;AAFwB,SAArB,CAAP;AAIA,OALD,CAR6F,CAe7F;AACA;AACA;;;AACAL,MAAAA,QAAQ,CAAEE,QAAF,CAAR,CAAqBK,IAArB,GAA4BH,eAA5B;AAEA,aAAOJ,QAAP;AACA,KArBqC,EAqBnC,EArBmC,CAAtC;AAuBA,WAAOH,UAAP;AACA,GA3BkB,EA2BhB,EA3BgB,CAAnB;AA4BA;;AAEDW,MAAM,CAACC,OAAP,GAAiB;AAChBC,EAAAA,QAAQ,EAAEf;AADM,CAAjB","sourcesContent":["/**\n * Take a WP route string (with PCRE named capture groups), `such as /author/(?P<id>\\d+)`,\n * and generate request handler factory methods for each represented endpoint.\n *\n * @module endpoint-factories\n */\n'use strict';\n\nconst createResourceHandlerSpec = require( './resource-handler-spec' ).create;\nconst createEndpointRequest = require( './endpoint-request' ).create;\nconst objectReduce = require( './util/object-reduce' );\n\n/**\n * Given an array of route definitions and a specific namespace for those routes,\n * recurse through the node tree representing all possible routes within the\n * provided namespace to define path value setters (and corresponding property\n * validators) for all possible variants of each resource's API endpoints.\n *\n * @method generate\n * @param {string} namespace         The namespace string for these routes\n * @param {object} routesByNamespace A dictionary of namespace - route definition\n *                                   object pairs as generated from buildRouteTree,\n *                                   where each route definition object is a dictionary\n *                                   keyed by route definition strings\n * @returns {object} A dictionary of endpoint request handler factories\n */\nfunction generateEndpointFactories( routesByNamespace ) {\n\n\treturn objectReduce( routesByNamespace, ( namespaces, routeDefinitions, namespace ) => {\n\n\t\t// Create\n\t\tnamespaces[ namespace ] = objectReduce( routeDefinitions, ( handlers, routeDef, resource ) => {\n\n\t\t\tconst handlerSpec = createResourceHandlerSpec( routeDef, resource );\n\n\t\t\tconst EndpointRequest = createEndpointRequest( handlerSpec, resource, namespace );\n\n\t\t\t// \"handler\" object is now fully prepared; create the factory method that\n\t\t\t// will instantiate and return a handler instance\n\t\t\thandlers[ resource ] = function( options ) {\n\t\t\t\treturn new EndpointRequest( {\n\t\t\t\t\t...this._options,\n\t\t\t\t\t...options,\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\t// Expose the constructor as a property on the factory function, so that\n\t\t\t// auto-generated endpoint request constructors may be further customized\n\t\t\t// when needed\n\t\t\thandlers[ resource ].Ctor = EndpointRequest;\n\n\t\t\treturn handlers;\n\t\t}, {} );\n\n\t\treturn namespaces;\n\t}, {} );\n}\n\nmodule.exports = {\n\tgenerate: generateEndpointFactories,\n};\n"]},"metadata":{},"sourceType":"script"}