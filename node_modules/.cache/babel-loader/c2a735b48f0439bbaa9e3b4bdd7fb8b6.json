{"ast":null,"code":"/**\n * @module endpoint-request\n */\n'use strict';\n\nconst WPRequest = require('./constructors/wp-request');\n\nconst mixins = require('./mixins');\n\nconst applyMixin = require('./util/apply-mixin');\n/**\n * Create an endpoint request handler constructor for a specific resource tree\n *\n * @method create\n * @param {Object} handlerSpec A resource handler specification object\n * @param {String} resource    The root resource of requests created from the returned factory\n * @param {String} namespace   The namespace string for the returned factory's handlers\n * @returns {Function} A constructor inheriting from {@link WPRequest}\n */\n\n\nfunction createEndpointRequest(handlerSpec, resource, namespace) {\n  // Create the constructor function for this endpoint\n  class EndpointRequest extends WPRequest {\n    constructor(options) {\n      super(options);\n      /**\n       * Semi-private instance property specifying the available URL path options\n       * for this endpoint request handler, keyed by ascending whole numbers.\n       *\n       * @property _levels\n       * @type {object}\n       * @private\n       */\n\n      this._levels = handlerSpec._levels; // Configure handler for this endpoint's root URL path & set namespace\n\n      this.setPathPart(0, resource).namespace(namespace);\n    }\n\n  } // Mix in all available shortcut methods for GET request query parameters that\n  // are valid within this endpoint tree\n\n\n  if (typeof handlerSpec._getArgs === 'object') {\n    Object.keys(handlerSpec._getArgs).forEach(supportedQueryParam => {\n      const mixinsForParam = mixins[supportedQueryParam]; // Only proceed if there is a mixin available AND the specified mixins will\n      // not overwrite any previously-set prototype method\n\n      if (typeof mixinsForParam === 'object') {\n        Object.keys(mixinsForParam).forEach(methodName => {\n          applyMixin(EndpointRequest.prototype, methodName, mixinsForParam[methodName]);\n        });\n      }\n    });\n  }\n\n  Object.keys(handlerSpec._setters).forEach(setterFnName => {\n    // Only assign setter functions if they do not overwrite preexisting methods\n    if (!EndpointRequest.prototype[setterFnName]) {\n      EndpointRequest.prototype[setterFnName] = handlerSpec._setters[setterFnName];\n    }\n  });\n  return EndpointRequest;\n}\n\nmodule.exports = {\n  create: createEndpointRequest\n};","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/endpoint-request.js"],"names":["WPRequest","require","mixins","applyMixin","createEndpointRequest","handlerSpec","resource","namespace","EndpointRequest","constructor","options","_levels","setPathPart","_getArgs","Object","keys","forEach","supportedQueryParam","mixinsForParam","methodName","prototype","_setters","setterFnName","module","exports","create"],"mappings":"AAAA;;;AAGA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAE,2BAAF,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAE,UAAF,CAAtB;;AAEA,MAAME,UAAU,GAAGF,OAAO,CAAE,oBAAF,CAA1B;AAEA;;;;;;;;;;;AASA,SAASG,qBAAT,CAAgCC,WAAhC,EAA6CC,QAA7C,EAAuDC,SAAvD,EAAmE;AAElE;AACA,QAAMC,eAAN,SAA8BR,SAA9B,CAAwC;AACvCS,IAAAA,WAAW,CAAEC,OAAF,EAAY;AACtB,YAAOA,OAAP;AAEA;;;;;;;;;AAQA,WAAKC,OAAL,GAAeN,WAAW,CAACM,OAA3B,CAXsB,CAatB;;AACA,WACEC,WADF,CACe,CADf,EACkBN,QADlB,EAEEC,SAFF,CAEaA,SAFb;AAGA;;AAlBsC,GAH0B,CAwBlE;AACA;;;AACA,MAAK,OAAOF,WAAW,CAACQ,QAAnB,KAAgC,QAArC,EAAgD;AAC/CC,IAAAA,MAAM,CAACC,IAAP,CAAaV,WAAW,CAACQ,QAAzB,EAAoCG,OAApC,CAA+CC,mBAAF,IAA2B;AACvE,YAAMC,cAAc,GAAGhB,MAAM,CAAEe,mBAAF,CAA7B,CADuE,CAGvE;AACA;;AACA,UAAK,OAAOC,cAAP,KAA0B,QAA/B,EAA0C;AACzCJ,QAAAA,MAAM,CAACC,IAAP,CAAaG,cAAb,EAA8BF,OAA9B,CAAyCG,UAAF,IAAkB;AACxDhB,UAAAA,UAAU,CAAEK,eAAe,CAACY,SAAlB,EAA6BD,UAA7B,EAAyCD,cAAc,CAAEC,UAAF,CAAvD,CAAV;AACA,SAFD;AAGA;AACD,KAVD;AAWA;;AAEDL,EAAAA,MAAM,CAACC,IAAP,CAAaV,WAAW,CAACgB,QAAzB,EAAoCL,OAApC,CAA+CM,YAAF,IAAoB;AAChE;AACA,QAAK,CAAEd,eAAe,CAACY,SAAhB,CAA2BE,YAA3B,CAAP,EAAmD;AAClDd,MAAAA,eAAe,CAACY,SAAhB,CAA2BE,YAA3B,IAA4CjB,WAAW,CAACgB,QAAZ,CAAsBC,YAAtB,CAA5C;AACA;AACD,GALD;AAOA,SAAOd,eAAP;AACA;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AAChBC,EAAAA,MAAM,EAAErB;AADQ,CAAjB","sourcesContent":["/**\n * @module endpoint-request\n */\n'use strict';\n\nconst WPRequest = require( './constructors/wp-request' );\nconst mixins = require( './mixins' );\n\nconst applyMixin = require( './util/apply-mixin' );\n\n/**\n * Create an endpoint request handler constructor for a specific resource tree\n *\n * @method create\n * @param {Object} handlerSpec A resource handler specification object\n * @param {String} resource    The root resource of requests created from the returned factory\n * @param {String} namespace   The namespace string for the returned factory's handlers\n * @returns {Function} A constructor inheriting from {@link WPRequest}\n */\nfunction createEndpointRequest( handlerSpec, resource, namespace ) {\n\n\t// Create the constructor function for this endpoint\n\tclass EndpointRequest extends WPRequest {\n\t\tconstructor( options ) {\n\t\t\tsuper( options );\n\n\t\t\t/**\n\t\t\t * Semi-private instance property specifying the available URL path options\n\t\t\t * for this endpoint request handler, keyed by ascending whole numbers.\n\t\t\t *\n\t\t\t * @property _levels\n\t\t\t * @type {object}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._levels = handlerSpec._levels;\n\n\t\t\t// Configure handler for this endpoint's root URL path & set namespace\n\t\t\tthis\n\t\t\t\t.setPathPart( 0, resource )\n\t\t\t\t.namespace( namespace );\n\t\t}\n\t}\n\n\t// Mix in all available shortcut methods for GET request query parameters that\n\t// are valid within this endpoint tree\n\tif ( typeof handlerSpec._getArgs === 'object' ) {\n\t\tObject.keys( handlerSpec._getArgs ).forEach( ( supportedQueryParam ) => {\n\t\t\tconst mixinsForParam = mixins[ supportedQueryParam ];\n\n\t\t\t// Only proceed if there is a mixin available AND the specified mixins will\n\t\t\t// not overwrite any previously-set prototype method\n\t\t\tif ( typeof mixinsForParam === 'object' ) {\n\t\t\t\tObject.keys( mixinsForParam ).forEach( ( methodName ) => {\n\t\t\t\t\tapplyMixin( EndpointRequest.prototype, methodName, mixinsForParam[ methodName ] );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\tObject.keys( handlerSpec._setters ).forEach( ( setterFnName ) => {\n\t\t// Only assign setter functions if they do not overwrite preexisting methods\n\t\tif ( ! EndpointRequest.prototype[ setterFnName ] ) {\n\t\t\tEndpointRequest.prototype[ setterFnName ] = handlerSpec._setters[ setterFnName ];\n\t\t}\n\t} );\n\n\treturn EndpointRequest;\n}\n\nmodule.exports = {\n\tcreate: createEndpointRequest,\n};\n"]},"metadata":{},"sourceType":"script"}