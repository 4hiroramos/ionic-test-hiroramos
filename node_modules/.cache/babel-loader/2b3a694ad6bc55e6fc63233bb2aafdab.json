{"ast":null,"code":"/**\n * Filter methods that can be mixed in to a request constructor's prototype to\n * allow that request to take advantage of top-level query parameters for\n * collection endpoints. These are most relevant to posts, pages and CPTs, but\n * pagination helpers are applicable to any collection.\n *\n * @module mixins/parameters\n */\n'use strict';\n\nvar paramSetter = require('../util/parameter-setter');\n\nvar argumentIsNumeric = require('../util/argument-is-numeric');\n/**\n * @mixin parameters\n */\n\n\nvar parameterMixins = {};\n\nvar filters = require('./filters'); // Needed for .author mixin, as author by ID is a parameter and by Name is a filter\n\n\nvar filter = filters.filter; // Needed for .tag and .category mixin, for deprecated query-by-slug support\n\nvar taxonomy = filters.taxonomy; // Parameter Methods\n// =================\n\n/**\n * Query for posts by a specific author.\n * This method will replace any previous 'author' query parameters that had been set.\n *\n * Note that this method will either set the \"author\" top-level query parameter,\n * or else the \"author_name\" filter parameter (when querying by nicename): this is\n * irregular as most parameter helper methods either set a top level parameter or a\n * filter, not both.\n *\n * _Usage with the author nicename string is deprecated._ Query by author ID instead.\n * If the \"rest-filter\" plugin is not installed, the name query will have no effect.\n *\n * @method author\n * @chainable\n * @param {String|Number} author The nicename or ID for a particular author\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.author = function (author) {\n  if (author === undefined) {\n    return this;\n  }\n\n  if (typeof author === 'string') {\n    this.param('author', null);\n    return filter.call(this, 'author_name', author);\n  }\n\n  if (typeof author === 'number') {\n    filter.call(this, 'author_name', null);\n    return this.param('author', author);\n  }\n\n  if (author === null) {\n    filter.call(this, 'author_name', null);\n    return this.param('author', null);\n  }\n\n  throw new Error('author must be either a nicename string or numeric ID');\n};\n/**\n * Search for hierarchical taxonomy terms that are children of the parent term\n * indicated by the provided term ID\n *\n * @example\n *\n *     wp.pages().parent( 3 ).then(function( pages ) {\n *       // console.log( 'all of these pages are nested below page ID#3:' );\n *       // console.log( pages );\n *     });\n *\n *     wp.categories().parent( 42 ).then(function( categories ) {\n *       console.log( 'all of these categories are sub-items of cat ID#42:' );\n *       console.log( categories );\n *     });\n *\n * @method parent\n * @chainable\n * @param {Number} parentId The ID of a (hierarchical) taxonomy term\n * @returns The request instance (for chaining)\n */\n\n\nparameterMixins.parent = paramSetter('parent');\n/**\n * Specify the post for which to retrieve terms (relevant for *e.g.* taxonomy\n * and comment collection endpoints).\n *\n * @method post\n * @chainable\n * @param {String|Number} post The ID of the post for which to retrieve terms\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.post = paramSetter('post');\n/**\n * Specify the password to use to access the content of a password-protected post\n *\n * @method password\n * @chainable\n * @param {string} password A string password to access protected content within a post\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.password = paramSetter('password');\n/**\n * Specify for which post statuses to return posts in a response collection\n *\n * See https://codex.wordpress.org/Post_Status -- the default post status\n * values in WordPress which are most relevant to the API are 'publish',\n * 'future', 'draft', 'pending', 'private', and 'trash'. This parameter also\n * supports passing the special value \"any\" to return all statuses.\n *\n * @method status\n * @chainable\n * @param {string|string[]} status A status name string or array of strings\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.status = paramSetter('status');\n/**\n * Specify whether to return only, or to completely exclude, sticky posts\n *\n * @method sticky\n * @chainable\n * @param {boolean} sticky A boolean value for whether ONLY sticky posts (true) or\n *                         NO sticky posts (false) should be returned in the query\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.sticky = paramSetter('sticky'); // Taxonomy Term Filter Methods\n// ============================\n\n/**\n * Retrieve only records associated with one of the provided categories\n *\n * @method categories\n * @chainable\n * @param {String|Number|Array} categories A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.categories = paramSetter('categories');\n/**\n * Legacy wrapper for `.categories()` that uses `?filter` to query by slug if available\n *\n * @method tag\n * @deprecated Use `.categories()` and query by category IDs\n * @chainable\n * @param {String|Number|Array} tag A category term slug string, numeric ID, or array of numeric IDs\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.category = function (category) {\n  if (argumentIsNumeric(category)) {\n    return parameterMixins.categories.call(this, category);\n  }\n\n  return taxonomy.call(this, 'category', category);\n};\n/**\n * Exclude records associated with any of the provided category IDs\n *\n * @method excludeCategories\n * @chainable\n * @param {String|Number|Array} category A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\n\n\nparameterMixins.excludeCategories = paramSetter('categories_exclude');\n/**\n * Retrieve only records associated with one of the provided tag IDs\n *\n * @method tags\n * @chainable\n * @param {String|Number|Array} tags A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.tags = paramSetter('tags');\n/**\n * Legacy wrapper for `.tags()` that uses `?filter` to query by slug if available\n *\n * @method tag\n * @deprecated Use `.tags()` and query by term IDs\n * @chainable\n * @param {String|Number|Array} tag A tag term slug string, numeric ID, or array of numeric IDs\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.tag = function (tag) {\n  if (argumentIsNumeric(tag)) {\n    return parameterMixins.tags.call(this, tag);\n  }\n\n  return taxonomy.call(this, 'tag', tag);\n};\n/**\n * Exclude records associated with any of the provided tag IDs\n *\n * @method excludeTags\n * @chainable\n * @param {String|Number|Array} category A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\n\n\nparameterMixins.excludeTags = paramSetter('tags_exclude'); // Date Methods\n// ============\n\n/**\n * Retrieve only records published before a specified date\n *\n * @example <caption>Provide an ISO 8601-compliant date string</caption>\n *\n *     wp.posts().before('2016-03-22')...\n *\n * @example <caption>Provide a JavaScript Date object</caption>\n *\n *     wp.posts().before( new Date( 2016, 03, 22 ) )...\n *\n * @method before\n * @chainable\n * @param {String|Date} date An ISO 8601-compliant date string, or Date object\n * @returns The request instance (for chaining)\n */\n\nparameterMixins.before = function (date) {\n  return this.param('before', new Date(date).toISOString());\n};\n/**\n * Retrieve only records published after a specified date\n *\n * @example <caption>Provide an ISO 8601-compliant date string</caption>\n *\n *     wp.posts().after('1986-03-22')...\n *\n * @example <caption>Provide a JavaScript Date object</caption>\n *\n *     wp.posts().after( new Date( 1986, 03, 22 ) )...\n *\n * @method after\n * @chainable\n * @param {String|Date} date An ISO 8601-compliant date string, or Date object\n * @returns The request instance (for chaining)\n */\n\n\nparameterMixins.after = function (date) {\n  return this.param('after', new Date(date).toISOString());\n};\n\nmodule.exports = parameterMixins;","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/mixins/parameters.js"],"names":["paramSetter","require","argumentIsNumeric","parameterMixins","filters","filter","taxonomy","author","undefined","param","call","Error","parent","post","password","status","sticky","categories","category","excludeCategories","tags","tag","excludeTags","before","date","Date","toISOString","after","module","exports"],"mappings":"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","sourcesContent":["/**\n * Filter methods that can be mixed in to a request constructor's prototype to\n * allow that request to take advantage of top-level query parameters for\n * collection endpoints. These are most relevant to posts, pages and CPTs, but\n * pagination helpers are applicable to any collection.\n *\n * @module mixins/parameters\n */\n'use strict';\n\nconst paramSetter = require( '../util/parameter-setter' );\nconst argumentIsNumeric = require( '../util/argument-is-numeric' );\n\n/**\n * @mixin parameters\n */\nconst parameterMixins = {};\n\nconst filters = require( './filters' );\n// Needed for .author mixin, as author by ID is a parameter and by Name is a filter\nconst filter = filters.filter;\n// Needed for .tag and .category mixin, for deprecated query-by-slug support\nconst taxonomy = filters.taxonomy;\n\n// Parameter Methods\n// =================\n\n/**\n * Query for posts by a specific author.\n * This method will replace any previous 'author' query parameters that had been set.\n *\n * Note that this method will either set the \"author\" top-level query parameter,\n * or else the \"author_name\" filter parameter (when querying by nicename): this is\n * irregular as most parameter helper methods either set a top level parameter or a\n * filter, not both.\n *\n * _Usage with the author nicename string is deprecated._ Query by author ID instead.\n * If the \"rest-filter\" plugin is not installed, the name query will have no effect.\n *\n * @method author\n * @chainable\n * @param {String|Number} author The nicename or ID for a particular author\n * @returns The request instance (for chaining)\n */\nparameterMixins.author = function( author ) {\n\tif ( author === undefined ) {\n\t\treturn this;\n\t}\n\tif ( typeof author === 'string' ) {\n\t\tthis.param( 'author', null );\n\t\treturn filter.call( this, 'author_name', author );\n\t}\n\tif ( typeof author === 'number' ) {\n\t\tfilter.call( this, 'author_name', null );\n\t\treturn this.param( 'author', author );\n\t}\n\tif ( author === null ) {\n\t\tfilter.call( this, 'author_name', null );\n\t\treturn this.param( 'author', null );\n\t}\n\tthrow new Error( 'author must be either a nicename string or numeric ID' );\n};\n\n/**\n * Search for hierarchical taxonomy terms that are children of the parent term\n * indicated by the provided term ID\n *\n * @example\n *\n *     wp.pages().parent( 3 ).then(function( pages ) {\n *       // console.log( 'all of these pages are nested below page ID#3:' );\n *       // console.log( pages );\n *     });\n *\n *     wp.categories().parent( 42 ).then(function( categories ) {\n *       console.log( 'all of these categories are sub-items of cat ID#42:' );\n *       console.log( categories );\n *     });\n *\n * @method parent\n * @chainable\n * @param {Number} parentId The ID of a (hierarchical) taxonomy term\n * @returns The request instance (for chaining)\n */\nparameterMixins.parent = paramSetter( 'parent' );\n\n/**\n * Specify the post for which to retrieve terms (relevant for *e.g.* taxonomy\n * and comment collection endpoints).\n *\n * @method post\n * @chainable\n * @param {String|Number} post The ID of the post for which to retrieve terms\n * @returns The request instance (for chaining)\n */\nparameterMixins.post = paramSetter( 'post' );\n\n/**\n * Specify the password to use to access the content of a password-protected post\n *\n * @method password\n * @chainable\n * @param {string} password A string password to access protected content within a post\n * @returns The request instance (for chaining)\n */\nparameterMixins.password = paramSetter( 'password' );\n\n/**\n * Specify for which post statuses to return posts in a response collection\n *\n * See https://codex.wordpress.org/Post_Status -- the default post status\n * values in WordPress which are most relevant to the API are 'publish',\n * 'future', 'draft', 'pending', 'private', and 'trash'. This parameter also\n * supports passing the special value \"any\" to return all statuses.\n *\n * @method status\n * @chainable\n * @param {string|string[]} status A status name string or array of strings\n * @returns The request instance (for chaining)\n */\nparameterMixins.status = paramSetter( 'status' );\n\n/**\n * Specify whether to return only, or to completely exclude, sticky posts\n *\n * @method sticky\n * @chainable\n * @param {boolean} sticky A boolean value for whether ONLY sticky posts (true) or\n *                         NO sticky posts (false) should be returned in the query\n * @returns The request instance (for chaining)\n */\nparameterMixins.sticky = paramSetter( 'sticky' );\n\n// Taxonomy Term Filter Methods\n// ============================\n\n/**\n * Retrieve only records associated with one of the provided categories\n *\n * @method categories\n * @chainable\n * @param {String|Number|Array} categories A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\nparameterMixins.categories = paramSetter( 'categories' );\n\n/**\n * Legacy wrapper for `.categories()` that uses `?filter` to query by slug if available\n *\n * @method tag\n * @deprecated Use `.categories()` and query by category IDs\n * @chainable\n * @param {String|Number|Array} tag A category term slug string, numeric ID, or array of numeric IDs\n * @returns The request instance (for chaining)\n */\nparameterMixins.category = function( category ) {\n\tif ( argumentIsNumeric( category ) ) {\n\t\treturn parameterMixins.categories.call( this, category );\n\t}\n\treturn taxonomy.call( this, 'category', category );\n};\n\n/**\n * Exclude records associated with any of the provided category IDs\n *\n * @method excludeCategories\n * @chainable\n * @param {String|Number|Array} category A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\nparameterMixins.excludeCategories = paramSetter( 'categories_exclude' );\n\n/**\n * Retrieve only records associated with one of the provided tag IDs\n *\n * @method tags\n * @chainable\n * @param {String|Number|Array} tags A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\nparameterMixins.tags = paramSetter( 'tags' );\n\n/**\n * Legacy wrapper for `.tags()` that uses `?filter` to query by slug if available\n *\n * @method tag\n * @deprecated Use `.tags()` and query by term IDs\n * @chainable\n * @param {String|Number|Array} tag A tag term slug string, numeric ID, or array of numeric IDs\n * @returns The request instance (for chaining)\n */\nparameterMixins.tag = function( tag ) {\n\tif ( argumentIsNumeric( tag ) ) {\n\t\treturn parameterMixins.tags.call( this, tag );\n\t}\n\treturn taxonomy.call( this, 'tag', tag );\n};\n\n/**\n * Exclude records associated with any of the provided tag IDs\n *\n * @method excludeTags\n * @chainable\n * @param {String|Number|Array} category A term ID integer or numeric string, or array thereof\n * @returns The request instance (for chaining)\n */\nparameterMixins.excludeTags = paramSetter( 'tags_exclude' );\n\n// Date Methods\n// ============\n\n/**\n * Retrieve only records published before a specified date\n *\n * @example <caption>Provide an ISO 8601-compliant date string</caption>\n *\n *     wp.posts().before('2016-03-22')...\n *\n * @example <caption>Provide a JavaScript Date object</caption>\n *\n *     wp.posts().before( new Date( 2016, 03, 22 ) )...\n *\n * @method before\n * @chainable\n * @param {String|Date} date An ISO 8601-compliant date string, or Date object\n * @returns The request instance (for chaining)\n */\nparameterMixins.before = function( date ) {\n\treturn this.param( 'before', new Date( date ).toISOString() );\n};\n\n/**\n * Retrieve only records published after a specified date\n *\n * @example <caption>Provide an ISO 8601-compliant date string</caption>\n *\n *     wp.posts().after('1986-03-22')...\n *\n * @example <caption>Provide a JavaScript Date object</caption>\n *\n *     wp.posts().after( new Date( 1986, 03, 22 ) )...\n *\n * @method after\n * @chainable\n * @param {String|Date} date An ISO 8601-compliant date string, or Date object\n * @returns The request instance (for chaining)\n */\nparameterMixins.after = function( date ) {\n\treturn this.param( 'after', new Date( date ).toISOString() );\n};\n\nmodule.exports = parameterMixins;\n"]},"metadata":{},"sourceType":"script"}