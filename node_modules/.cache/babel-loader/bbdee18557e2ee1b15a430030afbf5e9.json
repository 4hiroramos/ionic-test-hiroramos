{"ast":null,"code":"/**\n * This module defines a mapping between supported GET request query parameter\n * arguments and their corresponding mixin, if available.\n */\n'use strict';\n\nconst filterMixins = require('./filters');\n\nconst parameterMixins = require('./parameters'); // `.context`, `.embed`, and `.edit` (a shortcut for `context(edit, true)`) are\n// supported by default in WPRequest, as is the base `.param` method. Any GET\n// argument parameters not covered here must be set directly by using `.param`.\n// The initial mixins we define are the ones where either a single property\n// accepted by the API endpoint corresponds to multiple individual mixin\n// functions, or where the name we use for the function diverges from that\n// of the query parameter that the mixin sets.\n\n\nconst mixins = {\n  categories: {\n    categories: parameterMixins.categories,\n\n    /** @deprecated use .categories() */\n    category: parameterMixins.category\n  },\n  categories_exclude: {\n    excludeCategories: parameterMixins.excludeCategories\n  },\n  tags: {\n    tags: parameterMixins.tags,\n\n    /** @deprecated use .tags() */\n    tag: parameterMixins.tag\n  },\n  tags_exclude: {\n    excludeTags: parameterMixins.excludeTags\n  },\n  filter: filterMixins,\n  post: {\n    post: parameterMixins.post,\n\n    /** @deprecated use .post() */\n    forPost: parameterMixins.post\n  }\n}; // All of these parameter mixins use a setter function named identically to the\n// property that the function sets, but they must still be provided in wrapper\n// objects so that the mixin can be `.assign`ed correctly: wrap & assign each\n// setter to the mixins dictionary object.\n\n['after', 'author', 'before', 'parent', 'password', 'status', 'sticky'].forEach(mixinName => {\n  mixins[mixinName] = {};\n  mixins[mixinName][mixinName] = parameterMixins[mixinName];\n});\nmodule.exports = mixins;","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/mixins/index.js"],"names":["filterMixins","require","parameterMixins","mixins","categories","category","categories_exclude","excludeCategories","tags","tag","tags_exclude","excludeTags","filter","post","forPost","forEach","mixinName","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAE,WAAF,CAA5B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAE,cAAF,CAA/B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,MAAME,MAAM,GAAG;AACdC,EAAAA,UAAU,EAAE;AACXA,IAAAA,UAAU,EAAEF,eAAe,CAACE,UADjB;;AAEX;AACAC,IAAAA,QAAQ,EAAEH,eAAe,CAACG;AAHf,GADE;AAMdC,EAAAA,kBAAkB,EAAE;AACnBC,IAAAA,iBAAiB,EAAEL,eAAe,CAACK;AADhB,GANN;AASdC,EAAAA,IAAI,EAAE;AACLA,IAAAA,IAAI,EAAEN,eAAe,CAACM,IADjB;;AAEL;AACAC,IAAAA,GAAG,EAAEP,eAAe,CAACO;AAHhB,GATQ;AAcdC,EAAAA,YAAY,EAAE;AACbC,IAAAA,WAAW,EAAET,eAAe,CAACS;AADhB,GAdA;AAiBdC,EAAAA,MAAM,EAAEZ,YAjBM;AAkBda,EAAAA,IAAI,EAAE;AACLA,IAAAA,IAAI,EAAEX,eAAe,CAACW,IADjB;;AAEL;AACAC,IAAAA,OAAO,EAAEZ,eAAe,CAACW;AAHpB;AAlBQ,CAAf,C,CAyBA;AACA;AACA;AACA;;AACA,CACC,OADD,EAEC,QAFD,EAGC,QAHD,EAIC,QAJD,EAKC,UALD,EAMC,QAND,EAOC,QAPD,EAQEE,OARF,CAQaC,SAAF,IAAiB;AAC3Bb,EAAAA,MAAM,CAAEa,SAAF,CAAN,GAAsB,EAAtB;AACAb,EAAAA,MAAM,CAAEa,SAAF,CAAN,CAAqBA,SAArB,IAAmCd,eAAe,CAAEc,SAAF,CAAlD;AACA,CAXD;AAaAC,MAAM,CAACC,OAAP,GAAiBf,MAAjB","sourcesContent":["/**\n * This module defines a mapping between supported GET request query parameter\n * arguments and their corresponding mixin, if available.\n */\n'use strict';\n\nconst filterMixins = require( './filters' );\nconst parameterMixins = require( './parameters' );\n\n// `.context`, `.embed`, and `.edit` (a shortcut for `context(edit, true)`) are\n// supported by default in WPRequest, as is the base `.param` method. Any GET\n// argument parameters not covered here must be set directly by using `.param`.\n\n// The initial mixins we define are the ones where either a single property\n// accepted by the API endpoint corresponds to multiple individual mixin\n// functions, or where the name we use for the function diverges from that\n// of the query parameter that the mixin sets.\nconst mixins = {\n\tcategories: {\n\t\tcategories: parameterMixins.categories,\n\t\t/** @deprecated use .categories() */\n\t\tcategory: parameterMixins.category,\n\t},\n\tcategories_exclude: {\n\t\texcludeCategories: parameterMixins.excludeCategories,\n\t},\n\ttags: {\n\t\ttags: parameterMixins.tags,\n\t\t/** @deprecated use .tags() */\n\t\ttag: parameterMixins.tag,\n\t},\n\ttags_exclude: {\n\t\texcludeTags: parameterMixins.excludeTags,\n\t},\n\tfilter: filterMixins,\n\tpost: {\n\t\tpost: parameterMixins.post,\n\t\t/** @deprecated use .post() */\n\t\tforPost: parameterMixins.post,\n\t},\n};\n\n// All of these parameter mixins use a setter function named identically to the\n// property that the function sets, but they must still be provided in wrapper\n// objects so that the mixin can be `.assign`ed correctly: wrap & assign each\n// setter to the mixins dictionary object.\n[\n\t'after',\n\t'author',\n\t'before',\n\t'parent',\n\t'password',\n\t'status',\n\t'sticky',\n].forEach( ( mixinName ) => {\n\tmixins[ mixinName ] = {};\n\tmixins[ mixinName ][ mixinName ] = parameterMixins[ mixinName ];\n} );\n\nmodule.exports = mixins;\n"]},"metadata":{},"sourceType":"script"}