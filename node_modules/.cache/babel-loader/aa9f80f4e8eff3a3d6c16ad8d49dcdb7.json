{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){/**\n       * @see https://qiita.com/wakeupsloth/items/6778df1e984f55c446e9#1-waiting%E7%8A%B6%E6%85%8B%E3%81%AEservice-worker%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%97%E3%81%A6onupdate%E3%82%92%E7%99%BA%E7%81%AB%E3%81%99%E3%82%8B\n       */if(registration.waiting&&config&&config.onUpdate){config.onUpdate(registration);}registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');var event=new Event(\"newContentAvailable\");window.dispatchEvent(event);// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/src/serviceWorker.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","waiting","onUpdate","onupdatefound","installingWorker","installing","onstatechange","state","controller","event","Event","dispatchEvent","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      /**\n       * @see https://qiita.com/wakeupsloth/items/6778df1e984f55c446e9#1-waiting%E7%8A%B6%E6%85%8B%E3%81%AEservice-worker%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%97%E3%81%A6onupdate%E3%82%92%E7%99%BA%E7%81%AB%E3%81%99%E3%82%8B\n       */\n      if (registration.waiting && config && config.onUpdate) {\n        config.onUpdate(registration);\n      }\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n              const event = new Event(\"newContentAvailable\");\n              window.dispatchEvent(event);\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}