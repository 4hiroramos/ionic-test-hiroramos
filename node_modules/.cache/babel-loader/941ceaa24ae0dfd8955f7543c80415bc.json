{"ast":null,"code":"/**\n * A WP REST API client for Node.js\n *\n * @example\n *     var wp = new WPAPI({ endpoint: 'http://src.wordpress-develop.dev/wp-json' });\n *     wp.posts().then(function( posts ) {\n *         console.log( posts );\n *     }).catch(function( err ) {\n *         console.error( err );\n *     });\n *\n * @license MIT\n })\n */\n'use strict';\n\nvar _objectSpread = require(\"/Users/hiromi/ionic-react-wordpress/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar objectReduce = require('./lib/util/object-reduce'); // This JSON file provides enough data to create handler methods for all valid\n// API routes in WordPress 4.7\n\n\nvar defaultRoutes = require('./lib/data/default-routes.json');\n\nvar buildRouteTree = require('./lib/route-tree').build;\n\nvar generateEndpointFactories = require('./lib/endpoint-factories').generate; // The default endpoint factories will be lazy-loaded by parsing the default\n// route tree data if a default-mode WPAPI instance is created (i.e. one that\n// is to be bootstrapped with the handlers for all of the built-in routes)\n\n\nvar defaultEndpointFactories; // Constant used to detect first-party WordPress REST API routes\n\nvar apiDefaultNamespace = 'wp/v2'; // Pull in autodiscovery methods\n\nvar autodiscovery = require('./lib/autodiscovery'); // Pull in base module constructors\n\n\nvar WPRequest = require('./lib/constructors/wp-request'); // Pull in default HTTP transport\n\n\nvar httpTransport = require('./lib/http-transport');\n/**\n * Construct a REST API client instance object to create\n *\n * @constructor WPAPI\n * @param {Object} options             An options hash to configure the instance\n * @param {String} options.endpoint    The URI for a WP-API endpoint\n * @param {String} [options.username]  A WP-API Basic Auth username\n * @param {String} [options.password]  A WP-API Basic Auth password\n * @param {String} [options.nonce]     A WP nonce for use with cookie authentication\n * @param {Object} [options.routes]    A dictionary of API routes with which to\n *                                     bootstrap the WPAPI instance: the instance will\n *                                     be initialized with default routes only\n *                                     if this property is omitted\n * @param {String} [options.transport] An optional dictionary of HTTP transport\n *                                     methods (.get, .post, .put, .delete, .head)\n *                                     to use instead of the defaults, e.g. to use\n *                                     a different HTTP library than superagent\n */\n\n\nfunction WPAPI(options) {\n  // Enforce `new`\n  if (this instanceof WPAPI === false) {\n    return new WPAPI(options);\n  }\n\n  if (typeof options.endpoint !== 'string') {\n    throw new Error('options hash must contain an API endpoint URL string');\n  } // Dictionary to be filled by handlers for default namespaces\n\n\n  this._ns = {};\n  this._options = {\n    // Ensure trailing slash on endpoint URI\n    endpoint: options.endpoint.replace(/\\/?$/, '/')\n  }; // If any authentication credentials were provided, assign them now\n\n  if (options && (options.username || options.password || options.nonce)) {\n    this.auth(options);\n  }\n\n  return this // Configure custom HTTP transport methods, if provided\n  .transport(options.transport) // Bootstrap with a specific routes object, if provided\n  .bootstrap(options && options.routes);\n}\n/**\n * Set custom transport methods to use when making HTTP requests against the API\n *\n * Pass an object with a function for one or many of \"get\", \"post\", \"put\",\n * \"delete\" and \"head\" and that function will be called when making that type\n * of request. The provided transport functions should take a WPRequest handler\n * instance (_e.g._ the result of a `wp.posts()...` chain or any other chaining\n * request handler) as their first argument; a `data` object as their second\n * argument (for POST, PUT and DELETE requests); and an optional callback as\n * their final argument. Transport methods should invoke the callback with the\n * response data (or error, as appropriate), and should also return a Promise.\n *\n * @example <caption>showing how a cache hit (keyed by URI) could short-circuit a get request</caption>\n *\n *     var site = new WPAPI({\n *       endpoint: 'http://my-site.com/wp-json'\n *     });\n *\n *     // Overwrite the GET behavior to inject a caching layer\n *     site.transport({\n *       get: function( wpreq, cb ) {\n *         var result = cache[ wpreq ];\n *         // If a cache hit is found, return it via the same callback/promise\n *         // signature as the default transport method\n *         if ( result ) {\n *           if ( cb && typeof cb === 'function' ) {\n *             cb( null, result );\n *           }\n *           return Promise.resolve( result );\n *         }\n *\n *         // Delegate to default transport if no cached data was found\n *         return WPAPI.transport.get( wpreq, cb ).then(function( result ) {\n *           cache[ wpreq ] = result;\n *           return result;\n *         });\n *       }\n *     });\n *\n * This is advanced behavior; you will only need to utilize this functionality\n * if your application has very specific HTTP handling or caching requirements.\n * Refer to the \"http-transport\" module within this application for the code\n * implementing the built-in transport methods.\n *\n * @memberof! WPAPI\n * @method transport\n * @chainable\n * @param {Object}   transport          A dictionary of HTTP transport methods\n * @param {Function} [transport.get]    The function to use for GET requests\n * @param {Function} [transport.post]   The function to use for POST requests\n * @param {Function} [transport.put]    The function to use for PUT requests\n * @param {Function} [transport.delete] The function to use for DELETE requests\n * @param {Function} [transport.head]   The function to use for HEAD requests\n * @returns {WPAPI} The WPAPI instance, for chaining\n */\n\n\nWPAPI.prototype.transport = function (transport) {\n  // Local reference to avoid need to reference via `this` inside forEach\n  var _options = this._options; // Create the default transport if it does not exist\n\n  if (!_options.transport) {\n    _options.transport = Object.create(WPAPI.transport);\n  } // Whitelist the methods that may be applied\n\n\n  ['get', 'head', 'post', 'put', 'delete'].forEach(function (key) {\n    if (transport && transport[key]) {\n      _options.transport[key] = transport[key];\n    }\n  });\n  return this;\n};\n/**\n * Default HTTP transport methods object for all WPAPI instances\n *\n * These methods may be extended or replaced on an instance-by-instance basis\n *\n * @memberof! WPAPI\n * @static\n * @property transport\n * @type {Object}\n */\n\n\nWPAPI.transport = Object.create(httpTransport);\nObject.freeze(WPAPI.transport);\n/**\n * Convenience method for making a new WPAPI instance\n *\n * @example\n * These are equivalent:\n *\n *     var wp = new WPAPI({ endpoint: 'http://my.blog.url/wp-json' });\n *     var wp = WPAPI.site( 'http://my.blog.url/wp-json' );\n *\n * `WPAPI.site` can take an optional API root response JSON object to use when\n * bootstrapping the client's endpoint handler methods: if no second parameter\n * is provided, the client instance is assumed to be using the default API\n * with no additional plugins and is initialized with handlers for only those\n * default API routes.\n *\n * @example\n * These are equivalent:\n *\n *     // {...} means the JSON output of http://my.blog.url/wp-json\n *     var wp = new WPAPI({\n *       endpoint: 'http://my.blog.url/wp-json',\n *       json: {...}\n *     });\n *     var wp = WPAPI.site( 'http://my.blog.url/wp-json', {...} );\n *\n * @memberof! WPAPI\n * @static\n * @param {String} endpoint The URI for a WP-API endpoint\n * @param {Object} routes   The \"routes\" object from the JSON object returned\n *                          from the root API endpoint of a WP site, which should\n *                          be a dictionary of route definition objects keyed by\n *                          the route's regex pattern\n * @returns {WPAPI} A new WPAPI instance, bound to the provided endpoint\n */\n\nWPAPI.site = function (endpoint, routes) {\n  return new WPAPI({\n    endpoint: endpoint,\n    routes: routes\n  });\n};\n/**\n * Generate a request against a completely arbitrary endpoint, with no assumptions about\n * or mutation of path, filtering, or query parameters. This request is not restricted to\n * the endpoint specified during WPAPI object instantiation.\n *\n * @example\n * Generate a request to the explicit URL \"http://your.website.com/wp-json/some/custom/path\"\n *\n *     wp.url( 'http://your.website.com/wp-json/some/custom/path' ).get()...\n *\n * @memberof! WPAPI\n * @param {String} url The URL to request\n * @returns {WPRequest} A WPRequest object bound to the provided URL\n */\n\n\nWPAPI.prototype.url = function (url) {\n  return new WPRequest(_objectSpread({}, this._options, {\n    endpoint: url\n  }));\n};\n/**\n * Generate a query against an arbitrary path on the current endpoint. This is useful for\n * requesting resources at custom WP-API endpoints, such as WooCommerce's `/products`.\n *\n * @memberof! WPAPI\n * @param {String} [relativePath] An endpoint-relative path to which to bind the request\n * @returns {WPRequest} A request object\n */\n\n\nWPAPI.prototype.root = function (relativePath) {\n  relativePath = relativePath || '';\n\n  var options = _objectSpread({}, this._options); // Request should be\n\n\n  var request = new WPRequest(options); // Set the path template to the string passed in\n\n  request._path = {\n    '0': relativePath\n  };\n  return request;\n};\n/**\n * Set the default headers to use for all HTTP requests created from this WPAPI\n * site instance. Accepts a header name and its associated value as two strings,\n * or multiple headers as an object of name-value pairs.\n *\n * @example <caption>Set a single header to be used by all requests to this site</caption>\n *\n *     site.setHeaders( 'Authorization', 'Bearer trustme' )...\n *\n * @example <caption>Set multiple headers to be used by all requests to this site</caption>\n *\n *     site.setHeaders({\n *       Authorization: 'Bearer comeonwereoldfriendsright',\n *       'Accept-Language': 'en-CA'\n *     })...\n *\n * @memberof! WPAPI\n * @since 1.1.0\n * @chainable\n * @param {String|Object} headers The name of the header to set, or an object of\n *                                header names and their associated string values\n * @param {String}        [value] The value of the header being set\n * @returns {WPAPI} The WPAPI site handler instance, for chaining\n */\n\n\nWPAPI.prototype.setHeaders = WPRequest.prototype.setHeaders;\n/**\n * Set the authentication to use for a WPAPI site handler instance. Accepts basic\n * HTTP authentication credentials (string username & password) or a Nonce (for\n * cookie authentication) by default; may be overloaded to accept OAuth credentials\n * in the future.\n *\n * @example <caption>Basic Authentication</caption>\n *\n *     site.auth({\n *       username: 'admin',\n *       password: 'securepass55'\n *     })...\n *\n * @example <caption>Cookie/Nonce Authentication</caption>\n *\n *     site.auth({\n *       nonce: 'somenonce'\n *     })...\n *\n * @memberof! WPAPI\n * @method\n * @chainable\n * @param {Object} credentials            An authentication credentials object\n * @param {String} [credentials.username] A WP-API Basic HTTP Authentication username\n * @param {String} [credentials.password] A WP-API Basic HTTP Authentication password\n * @param {String} [credentials.nonce]    A WP nonce for use with cookie authentication\n * @returns {WPAPI} The WPAPI site handler instance, for chaining\n */\n\nWPAPI.prototype.auth = WPRequest.prototype.auth; // Apply the registerRoute method to the prototype\n\nWPAPI.prototype.registerRoute = require('./lib/wp-register-route');\n/**\n * Deduce request methods from a provided API root JSON response object's\n * routes dictionary, and assign those methods to the current instance. If\n * no routes dictionary is provided then the instance will be bootstrapped\n * with route handlers for the default API endpoints only.\n *\n * This method is called automatically during WPAPI instance creation.\n *\n * @memberof! WPAPI\n * @chainable\n * @param {Object} routes The \"routes\" object from the JSON object returned\n *                        from the root API endpoint of a WP site, which should\n *                        be a dictionary of route definition objects keyed by\n *                        the route's regex pattern\n * @returns {WPAPI} The bootstrapped WPAPI client instance (for chaining or assignment)\n */\n\nWPAPI.prototype.bootstrap = function (routes) {\n  var routesByNamespace;\n  var endpointFactoriesByNamespace;\n\n  if (!routes) {\n    // Auto-generate default endpoint factories if they are not already available\n    if (!defaultEndpointFactories) {\n      routesByNamespace = buildRouteTree(defaultRoutes);\n      defaultEndpointFactories = generateEndpointFactories(routesByNamespace);\n    }\n\n    endpointFactoriesByNamespace = defaultEndpointFactories;\n  } else {\n    routesByNamespace = buildRouteTree(routes);\n    endpointFactoriesByNamespace = generateEndpointFactories(routesByNamespace);\n  } // For each namespace for which routes were identified, store the generated\n  // route handlers on the WPAPI instance's private _ns dictionary. These namespaced\n  // handler methods can be accessed by calling `.namespace( str )` on the\n  // client instance and passing a registered namespace string.\n  // Handlers for default (wp/v2) routes will also be assigned to the WPAPI\n  // client instance object itself, for brevity.\n\n\n  return objectReduce(endpointFactoriesByNamespace, function (wpInstance, endpointFactories, namespace) {\n    // Set (or augment) the route handler factories for this namespace.\n    wpInstance._ns[namespace] = objectReduce(endpointFactories, function (nsHandlers, handlerFn, methodName) {\n      nsHandlers[methodName] = handlerFn;\n      return nsHandlers;\n    }, wpInstance._ns[namespace] || {\n      // Create all namespace dictionaries with a direct reference to the main WPAPI\n      // instance's _options property so that things like auth propagate properly\n      _options: wpInstance._options\n    }); // For the default namespace, e.g. \"wp/v2\" at the time this comment was\n    // written, ensure all methods are assigned to the root client object itself\n    // in addition to the private _ns dictionary: this is done so that these\n    // methods can be called with e.g. `wp.posts()` and not the more verbose\n    // `wp.namespace( 'wp/v2' ).posts()`.\n\n    if (namespace === apiDefaultNamespace) {\n      Object.keys(wpInstance._ns[namespace]).forEach(function (methodName) {\n        wpInstance[methodName] = wpInstance._ns[namespace][methodName];\n      });\n    }\n\n    return wpInstance;\n  }, this);\n};\n/**\n * Access API endpoint handlers from a particular API namespace object\n *\n * @example\n *\n *     wp.namespace( 'myplugin/v1' ).author()...\n *\n *     // Default WP endpoint handlers are assigned to the wp instance itself.\n *     // These are equivalent:\n *     wp.namespace( 'wp/v2' ).posts()...\n *     wp.posts()...\n *\n * @memberof! WPAPI\n * @param {string} namespace A namespace string\n * @returns {Object} An object of route endpoint handler methods for the\n * routes within the specified namespace\n */\n\n\nWPAPI.prototype.namespace = function (namespace) {\n  if (!this._ns[namespace]) {\n    throw new Error('Error: namespace ' + namespace + ' is not recognized');\n  }\n\n  return this._ns[namespace];\n};\n/**\n * Take an arbitrary WordPress site, deduce the WP REST API root endpoint, query\n * that endpoint, and parse the response JSON. Use the returned JSON response\n * to instantiate a WPAPI instance bound to the provided site.\n *\n * @memberof! WPAPI\n * @static\n * @param {string} url A URL within a REST API-enabled WordPress website\n * @returns {Promise} A promise that resolves to a configured WPAPI instance bound\n * to the deduced endpoint, or rejected if an endpoint is not found or the\n * library is unable to parse the provided endpoint.\n */\n\n\nWPAPI.discover = function (url) {\n  // local placeholder for API root URL\n  var endpoint; // Try HEAD request first, for smaller payload: use WPAPI.site to produce\n  // a request that utilizes the defined HTTP transports\n\n  var req = WPAPI.site(url).root();\n  return req.headers().catch(function () {\n    // On the hypothesis that any error here is related to the HEAD request\n    // failing, provisionally try again using GET because that method is\n    // more widely supported\n    return req.get();\n  }) // Inspect response to find API location header\n  .then(autodiscovery.locateAPIRootHeader).then(function (apiRootURL) {\n    // Set the function-scope variable that will be used to instantiate\n    // the bound WPAPI instance,\n    endpoint = apiRootURL; // then GET the API root JSON object\n\n    return WPAPI.site(apiRootURL).root().get();\n  }).then(function (apiRootJSON) {\n    // Instantiate & bootstrap with the discovered methods\n    return new WPAPI({\n      endpoint: endpoint,\n      routes: apiRootJSON.routes\n    });\n  }).catch(function (err) {\n    /* eslint-disable no-console */\n    console.error(err);\n\n    if (endpoint) {\n      console.warn('Endpoint detected, proceeding despite error...');\n      console.warn('Binding to ' + endpoint + ' and assuming default routes');\n      return new WPAPI.site(endpoint);\n    }\n\n    throw new Error('Autodiscovery failed');\n  });\n};\n\nmodule.exports = WPAPI;","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/wpapi.js"],"names":["objectReduce","require","defaultRoutes","buildRouteTree","build","generateEndpointFactories","generate","defaultEndpointFactories","apiDefaultNamespace","autodiscovery","WPRequest","httpTransport","WPAPI","options","endpoint","Error","_ns","_options","replace","username","password","nonce","auth","transport","bootstrap","routes","prototype","Object","create","forEach","key","freeze","site","url","root","relativePath","request","_path","setHeaders","registerRoute","routesByNamespace","endpointFactoriesByNamespace","wpInstance","endpointFactories","namespace","nsHandlers","handlerFn","methodName","keys","discover","req","headers","catch","get","then","locateAPIRootHeader","apiRootURL","apiRootJSON","err","console","error","warn","module","exports"],"mappings":"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","sourcesContent":["/**\n * A WP REST API client for Node.js\n *\n * @example\n *     var wp = new WPAPI({ endpoint: 'http://src.wordpress-develop.dev/wp-json' });\n *     wp.posts().then(function( posts ) {\n *         console.log( posts );\n *     }).catch(function( err ) {\n *         console.error( err );\n *     });\n *\n * @license MIT\n })\n */\n'use strict';\n\nconst objectReduce = require( './lib/util/object-reduce' );\n\n// This JSON file provides enough data to create handler methods for all valid\n// API routes in WordPress 4.7\nconst defaultRoutes = require( './lib/data/default-routes.json' );\nconst buildRouteTree = require( './lib/route-tree' ).build;\nconst generateEndpointFactories = require( './lib/endpoint-factories' ).generate;\n\n// The default endpoint factories will be lazy-loaded by parsing the default\n// route tree data if a default-mode WPAPI instance is created (i.e. one that\n// is to be bootstrapped with the handlers for all of the built-in routes)\nlet defaultEndpointFactories;\n\n// Constant used to detect first-party WordPress REST API routes\nconst apiDefaultNamespace = 'wp/v2';\n\n// Pull in autodiscovery methods\nconst autodiscovery = require( './lib/autodiscovery' );\n\n// Pull in base module constructors\nconst WPRequest = require( './lib/constructors/wp-request' );\n\n// Pull in default HTTP transport\nconst httpTransport = require( './lib/http-transport' );\n\n/**\n * Construct a REST API client instance object to create\n *\n * @constructor WPAPI\n * @param {Object} options             An options hash to configure the instance\n * @param {String} options.endpoint    The URI for a WP-API endpoint\n * @param {String} [options.username]  A WP-API Basic Auth username\n * @param {String} [options.password]  A WP-API Basic Auth password\n * @param {String} [options.nonce]     A WP nonce for use with cookie authentication\n * @param {Object} [options.routes]    A dictionary of API routes with which to\n *                                     bootstrap the WPAPI instance: the instance will\n *                                     be initialized with default routes only\n *                                     if this property is omitted\n * @param {String} [options.transport] An optional dictionary of HTTP transport\n *                                     methods (.get, .post, .put, .delete, .head)\n *                                     to use instead of the defaults, e.g. to use\n *                                     a different HTTP library than superagent\n */\nfunction WPAPI( options ) {\n\n\t// Enforce `new`\n\tif ( this instanceof WPAPI === false ) {\n\t\treturn new WPAPI( options );\n\t}\n\n\tif ( typeof options.endpoint !== 'string' ) {\n\t\tthrow new Error( 'options hash must contain an API endpoint URL string' );\n\t}\n\n\t// Dictionary to be filled by handlers for default namespaces\n\tthis._ns = {};\n\n\tthis._options = {\n\t\t// Ensure trailing slash on endpoint URI\n\t\tendpoint: options.endpoint.replace(  /\\/?$/, '/' ),\n\t};\n\n\t// If any authentication credentials were provided, assign them now\n\tif ( options && ( options.username || options.password || options.nonce ) ) {\n\t\tthis.auth( options );\n\t}\n\n\treturn this\n\t\t// Configure custom HTTP transport methods, if provided\n\t\t.transport( options.transport )\n\t\t// Bootstrap with a specific routes object, if provided\n\t\t.bootstrap( options && options.routes );\n}\n\n/**\n * Set custom transport methods to use when making HTTP requests against the API\n *\n * Pass an object with a function for one or many of \"get\", \"post\", \"put\",\n * \"delete\" and \"head\" and that function will be called when making that type\n * of request. The provided transport functions should take a WPRequest handler\n * instance (_e.g._ the result of a `wp.posts()...` chain or any other chaining\n * request handler) as their first argument; a `data` object as their second\n * argument (for POST, PUT and DELETE requests); and an optional callback as\n * their final argument. Transport methods should invoke the callback with the\n * response data (or error, as appropriate), and should also return a Promise.\n *\n * @example <caption>showing how a cache hit (keyed by URI) could short-circuit a get request</caption>\n *\n *     var site = new WPAPI({\n *       endpoint: 'http://my-site.com/wp-json'\n *     });\n *\n *     // Overwrite the GET behavior to inject a caching layer\n *     site.transport({\n *       get: function( wpreq, cb ) {\n *         var result = cache[ wpreq ];\n *         // If a cache hit is found, return it via the same callback/promise\n *         // signature as the default transport method\n *         if ( result ) {\n *           if ( cb && typeof cb === 'function' ) {\n *             cb( null, result );\n *           }\n *           return Promise.resolve( result );\n *         }\n *\n *         // Delegate to default transport if no cached data was found\n *         return WPAPI.transport.get( wpreq, cb ).then(function( result ) {\n *           cache[ wpreq ] = result;\n *           return result;\n *         });\n *       }\n *     });\n *\n * This is advanced behavior; you will only need to utilize this functionality\n * if your application has very specific HTTP handling or caching requirements.\n * Refer to the \"http-transport\" module within this application for the code\n * implementing the built-in transport methods.\n *\n * @memberof! WPAPI\n * @method transport\n * @chainable\n * @param {Object}   transport          A dictionary of HTTP transport methods\n * @param {Function} [transport.get]    The function to use for GET requests\n * @param {Function} [transport.post]   The function to use for POST requests\n * @param {Function} [transport.put]    The function to use for PUT requests\n * @param {Function} [transport.delete] The function to use for DELETE requests\n * @param {Function} [transport.head]   The function to use for HEAD requests\n * @returns {WPAPI} The WPAPI instance, for chaining\n */\nWPAPI.prototype.transport = function( transport ) {\n\t// Local reference to avoid need to reference via `this` inside forEach\n\tconst _options = this._options;\n\n\t// Create the default transport if it does not exist\n\tif ( ! _options.transport ) {\n\t\t_options.transport = Object.create( WPAPI.transport );\n\t}\n\n\t// Whitelist the methods that may be applied\n\t[ 'get', 'head', 'post', 'put', 'delete' ].forEach( ( key ) => {\n\t\tif ( transport && transport[ key ] ) {\n\t\t\t_options.transport[ key ] = transport[ key ];\n\t\t}\n\t} );\n\n\treturn this;\n};\n\n/**\n * Default HTTP transport methods object for all WPAPI instances\n *\n * These methods may be extended or replaced on an instance-by-instance basis\n *\n * @memberof! WPAPI\n * @static\n * @property transport\n * @type {Object}\n */\nWPAPI.transport = Object.create( httpTransport );\nObject.freeze( WPAPI.transport );\n\n/**\n * Convenience method for making a new WPAPI instance\n *\n * @example\n * These are equivalent:\n *\n *     var wp = new WPAPI({ endpoint: 'http://my.blog.url/wp-json' });\n *     var wp = WPAPI.site( 'http://my.blog.url/wp-json' );\n *\n * `WPAPI.site` can take an optional API root response JSON object to use when\n * bootstrapping the client's endpoint handler methods: if no second parameter\n * is provided, the client instance is assumed to be using the default API\n * with no additional plugins and is initialized with handlers for only those\n * default API routes.\n *\n * @example\n * These are equivalent:\n *\n *     // {...} means the JSON output of http://my.blog.url/wp-json\n *     var wp = new WPAPI({\n *       endpoint: 'http://my.blog.url/wp-json',\n *       json: {...}\n *     });\n *     var wp = WPAPI.site( 'http://my.blog.url/wp-json', {...} );\n *\n * @memberof! WPAPI\n * @static\n * @param {String} endpoint The URI for a WP-API endpoint\n * @param {Object} routes   The \"routes\" object from the JSON object returned\n *                          from the root API endpoint of a WP site, which should\n *                          be a dictionary of route definition objects keyed by\n *                          the route's regex pattern\n * @returns {WPAPI} A new WPAPI instance, bound to the provided endpoint\n */\nWPAPI.site = function( endpoint, routes ) {\n\treturn new WPAPI( {\n\t\tendpoint: endpoint,\n\t\troutes: routes,\n\t} );\n};\n\n/**\n * Generate a request against a completely arbitrary endpoint, with no assumptions about\n * or mutation of path, filtering, or query parameters. This request is not restricted to\n * the endpoint specified during WPAPI object instantiation.\n *\n * @example\n * Generate a request to the explicit URL \"http://your.website.com/wp-json/some/custom/path\"\n *\n *     wp.url( 'http://your.website.com/wp-json/some/custom/path' ).get()...\n *\n * @memberof! WPAPI\n * @param {String} url The URL to request\n * @returns {WPRequest} A WPRequest object bound to the provided URL\n */\nWPAPI.prototype.url = function( url ) {\n\treturn new WPRequest( {\n\t\t...this._options,\n\t\tendpoint: url,\n\t} );\n};\n\n/**\n * Generate a query against an arbitrary path on the current endpoint. This is useful for\n * requesting resources at custom WP-API endpoints, such as WooCommerce's `/products`.\n *\n * @memberof! WPAPI\n * @param {String} [relativePath] An endpoint-relative path to which to bind the request\n * @returns {WPRequest} A request object\n */\nWPAPI.prototype.root = function( relativePath ) {\n\trelativePath = relativePath || '';\n\tconst options = {\n\t\t...this._options,\n\t};\n\t// Request should be\n\tconst request = new WPRequest( options );\n\n\t// Set the path template to the string passed in\n\trequest._path = { '0': relativePath };\n\n\treturn request;\n};\n\n/**\n * Set the default headers to use for all HTTP requests created from this WPAPI\n * site instance. Accepts a header name and its associated value as two strings,\n * or multiple headers as an object of name-value pairs.\n *\n * @example <caption>Set a single header to be used by all requests to this site</caption>\n *\n *     site.setHeaders( 'Authorization', 'Bearer trustme' )...\n *\n * @example <caption>Set multiple headers to be used by all requests to this site</caption>\n *\n *     site.setHeaders({\n *       Authorization: 'Bearer comeonwereoldfriendsright',\n *       'Accept-Language': 'en-CA'\n *     })...\n *\n * @memberof! WPAPI\n * @since 1.1.0\n * @chainable\n * @param {String|Object} headers The name of the header to set, or an object of\n *                                header names and their associated string values\n * @param {String}        [value] The value of the header being set\n * @returns {WPAPI} The WPAPI site handler instance, for chaining\n */\nWPAPI.prototype.setHeaders = WPRequest.prototype.setHeaders;\n\n/**\n * Set the authentication to use for a WPAPI site handler instance. Accepts basic\n * HTTP authentication credentials (string username & password) or a Nonce (for\n * cookie authentication) by default; may be overloaded to accept OAuth credentials\n * in the future.\n *\n * @example <caption>Basic Authentication</caption>\n *\n *     site.auth({\n *       username: 'admin',\n *       password: 'securepass55'\n *     })...\n *\n * @example <caption>Cookie/Nonce Authentication</caption>\n *\n *     site.auth({\n *       nonce: 'somenonce'\n *     })...\n *\n * @memberof! WPAPI\n * @method\n * @chainable\n * @param {Object} credentials            An authentication credentials object\n * @param {String} [credentials.username] A WP-API Basic HTTP Authentication username\n * @param {String} [credentials.password] A WP-API Basic HTTP Authentication password\n * @param {String} [credentials.nonce]    A WP nonce for use with cookie authentication\n * @returns {WPAPI} The WPAPI site handler instance, for chaining\n */\nWPAPI.prototype.auth = WPRequest.prototype.auth;\n\n// Apply the registerRoute method to the prototype\nWPAPI.prototype.registerRoute = require( './lib/wp-register-route' );\n\n/**\n * Deduce request methods from a provided API root JSON response object's\n * routes dictionary, and assign those methods to the current instance. If\n * no routes dictionary is provided then the instance will be bootstrapped\n * with route handlers for the default API endpoints only.\n *\n * This method is called automatically during WPAPI instance creation.\n *\n * @memberof! WPAPI\n * @chainable\n * @param {Object} routes The \"routes\" object from the JSON object returned\n *                        from the root API endpoint of a WP site, which should\n *                        be a dictionary of route definition objects keyed by\n *                        the route's regex pattern\n * @returns {WPAPI} The bootstrapped WPAPI client instance (for chaining or assignment)\n */\nWPAPI.prototype.bootstrap = function( routes ) {\n\tlet routesByNamespace;\n\tlet endpointFactoriesByNamespace;\n\n\tif ( ! routes ) {\n\t\t// Auto-generate default endpoint factories if they are not already available\n\t\tif ( ! defaultEndpointFactories ) {\n\t\t\troutesByNamespace = buildRouteTree( defaultRoutes );\n\t\t\tdefaultEndpointFactories = generateEndpointFactories( routesByNamespace );\n\t\t}\n\t\tendpointFactoriesByNamespace = defaultEndpointFactories;\n\t} else {\n\t\troutesByNamespace = buildRouteTree( routes );\n\t\tendpointFactoriesByNamespace = generateEndpointFactories( routesByNamespace );\n\t}\n\n\t// For each namespace for which routes were identified, store the generated\n\t// route handlers on the WPAPI instance's private _ns dictionary. These namespaced\n\t// handler methods can be accessed by calling `.namespace( str )` on the\n\t// client instance and passing a registered namespace string.\n\t// Handlers for default (wp/v2) routes will also be assigned to the WPAPI\n\t// client instance object itself, for brevity.\n\treturn objectReduce( endpointFactoriesByNamespace, ( wpInstance, endpointFactories, namespace ) => {\n\n\t\t// Set (or augment) the route handler factories for this namespace.\n\t\twpInstance._ns[ namespace ] = objectReduce(\n\t\t\tendpointFactories,\n\t\t\t( nsHandlers, handlerFn, methodName ) => {\n\t\t\t\tnsHandlers[ methodName ] = handlerFn;\n\t\t\t\treturn nsHandlers;\n\t\t\t},\n\t\t\twpInstance._ns[ namespace ] || {\n\t\t\t\t// Create all namespace dictionaries with a direct reference to the main WPAPI\n\t\t\t\t// instance's _options property so that things like auth propagate properly\n\t\t\t\t_options: wpInstance._options,\n\t\t\t}\n\t\t);\n\n\t\t// For the default namespace, e.g. \"wp/v2\" at the time this comment was\n\t\t// written, ensure all methods are assigned to the root client object itself\n\t\t// in addition to the private _ns dictionary: this is done so that these\n\t\t// methods can be called with e.g. `wp.posts()` and not the more verbose\n\t\t// `wp.namespace( 'wp/v2' ).posts()`.\n\t\tif ( namespace === apiDefaultNamespace ) {\n\t\t\tObject.keys( wpInstance._ns[ namespace ] ).forEach( ( methodName ) => {\n\t\t\t\twpInstance[ methodName ] = wpInstance._ns[ namespace ][ methodName ];\n\t\t\t} );\n\t\t}\n\n\t\treturn wpInstance;\n\t}, this );\n};\n\n/**\n * Access API endpoint handlers from a particular API namespace object\n *\n * @example\n *\n *     wp.namespace( 'myplugin/v1' ).author()...\n *\n *     // Default WP endpoint handlers are assigned to the wp instance itself.\n *     // These are equivalent:\n *     wp.namespace( 'wp/v2' ).posts()...\n *     wp.posts()...\n *\n * @memberof! WPAPI\n * @param {string} namespace A namespace string\n * @returns {Object} An object of route endpoint handler methods for the\n * routes within the specified namespace\n */\nWPAPI.prototype.namespace = function( namespace ) {\n\tif ( ! this._ns[ namespace ] ) {\n\t\tthrow new Error( 'Error: namespace ' + namespace + ' is not recognized' );\n\t}\n\treturn this._ns[ namespace ];\n};\n\n/**\n * Take an arbitrary WordPress site, deduce the WP REST API root endpoint, query\n * that endpoint, and parse the response JSON. Use the returned JSON response\n * to instantiate a WPAPI instance bound to the provided site.\n *\n * @memberof! WPAPI\n * @static\n * @param {string} url A URL within a REST API-enabled WordPress website\n * @returns {Promise} A promise that resolves to a configured WPAPI instance bound\n * to the deduced endpoint, or rejected if an endpoint is not found or the\n * library is unable to parse the provided endpoint.\n */\nWPAPI.discover = ( url ) => {\n\t// local placeholder for API root URL\n\tlet endpoint;\n\n\t// Try HEAD request first, for smaller payload: use WPAPI.site to produce\n\t// a request that utilizes the defined HTTP transports\n\tconst req = WPAPI.site( url ).root();\n\treturn req.headers()\n\t\t.catch( () => {\n\t\t\t// On the hypothesis that any error here is related to the HEAD request\n\t\t\t// failing, provisionally try again using GET because that method is\n\t\t\t// more widely supported\n\t\t\treturn req.get();\n\t\t} )\n\t\t// Inspect response to find API location header\n\t\t.then( autodiscovery.locateAPIRootHeader )\n\t\t.then( ( apiRootURL ) => {\n\t\t\t// Set the function-scope variable that will be used to instantiate\n\t\t\t// the bound WPAPI instance,\n\t\t\tendpoint = apiRootURL;\n\n\t\t\t// then GET the API root JSON object\n\t\t\treturn WPAPI.site( apiRootURL ).root().get();\n\t\t} )\n\t\t.then( ( apiRootJSON ) => {\n\t\t\t// Instantiate & bootstrap with the discovered methods\n\t\t\treturn new WPAPI( {\n\t\t\t\tendpoint: endpoint,\n\t\t\t\troutes: apiRootJSON.routes,\n\t\t\t} );\n\t\t} )\n\t\t.catch( ( err ) => {\n\t\t\t/* eslint-disable no-console */\n\t\t\tconsole.error( err );\n\t\t\tif ( endpoint ) {\n\t\t\t\tconsole.warn( 'Endpoint detected, proceeding despite error...' );\n\t\t\t\tconsole.warn( 'Binding to ' + endpoint + ' and assuming default routes' );\n\t\t\t\treturn new WPAPI.site( endpoint );\n\t\t\t}\n\t\t\tthrow new Error( 'Autodiscovery failed' );\n\t\t} );\n};\n\nmodule.exports = WPAPI;\n"]},"metadata":{},"sourceType":"script"}