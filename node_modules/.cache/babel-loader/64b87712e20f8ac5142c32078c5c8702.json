{"ast":null,"code":"'use strict';\n/**\n * Return true if the provided argument is a number, a numeric string, or an\n * array of numbers or numeric strings\n *\n * @module util/argument-is-numeric\n * @param {Number|String|Number[]|String[]} val The value to inspect\n * @param {String} key The property to which the mixin method should be assigned\n * @param {Function} mixin The mixin method\n * @returns {void}\n */\n\nvar argumentIsNumeric = function argumentIsNumeric(val) {\n  if (typeof val === 'number') {\n    return true;\n  }\n\n  if (typeof val === 'string') {\n    return /^\\d+$/.test(val);\n  }\n\n  if (Array.isArray(val)) {\n    for (var i = 0; i < val.length; i++) {\n      // Fail early if any argument isn't determined to be numeric\n      if (!argumentIsNumeric(val[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } // If it's not an array, and not a string, and not a number, we don't\n  // know what to do with it\n\n\n  return false;\n};\n\nmodule.exports = argumentIsNumeric;","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/util/argument-is-numeric.js"],"names":["argumentIsNumeric","val","test","Array","isArray","i","length","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;AAUA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAEC,GAAF,EAAW;AACpC,MAAK,OAAOA,GAAP,KAAe,QAApB,EAA+B;AAC9B,WAAO,IAAP;AACA;;AAED,MAAK,OAAOA,GAAP,KAAe,QAApB,EAA+B;AAC9B,WAAO,QAAQC,IAAR,CAAcD,GAAd,CAAP;AACA;;AAED,MAAKE,KAAK,CAACC,OAAN,CAAeH,GAAf,CAAL,EAA4B;AAC3B,SAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,GAAG,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAuC;AACtC;AACA,UAAK,CAAEL,iBAAiB,CAAEC,GAAG,CAAEI,CAAF,CAAL,CAAxB,EAAuC;AACtC,eAAO,KAAP;AACA;AACD;;AACD,WAAO,IAAP;AACA,GAjBmC,CAmBpC;AACA;;;AACA,SAAO,KAAP;AACA,CAtBD;;AAwBAE,MAAM,CAACC,OAAP,GAAiBR,iBAAjB","sourcesContent":["'use strict';\n\n/**\n * Return true if the provided argument is a number, a numeric string, or an\n * array of numbers or numeric strings\n *\n * @module util/argument-is-numeric\n * @param {Number|String|Number[]|String[]} val The value to inspect\n * @param {String} key The property to which the mixin method should be assigned\n * @param {Function} mixin The mixin method\n * @returns {void}\n */\nconst argumentIsNumeric = ( val ) => {\n\tif ( typeof val === 'number' ) {\n\t\treturn true;\n\t}\n\n\tif ( typeof val === 'string' ) {\n\t\treturn /^\\d+$/.test( val );\n\t}\n\n\tif ( Array.isArray( val ) ) {\n\t\tfor ( let i = 0; i < val.length; i++ ) {\n\t\t\t// Fail early if any argument isn't determined to be numeric\n\t\t\tif ( ! argumentIsNumeric( val[ i ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// If it's not an array, and not a string, and not a number, we don't\n\t// know what to do with it\n\treturn false;\n};\n\nmodule.exports = argumentIsNumeric;\n"]},"metadata":{},"sourceType":"script"}