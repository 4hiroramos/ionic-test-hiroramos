{"ast":null,"code":"/**\n * @module util/named-group-regexp\n */\n'use strict';\n\nconst pattern = [// Capture group start\n'\\\\(\\\\?', // Capture group name begins either `P<`, `<` or `'`\n'(?:P<|<|\\')', // Everything up to the next `>`` or `'` (depending) will be the capture group name\n'([^>\\']+)', // Capture group end\n'[>\\']', // Get everything up to the end of the capture group: this is the RegExp used\n// when matching URLs to this route, which we can use for validation purposes.\n'([^\\\\)]*)', // Capture group end\n'\\\\)'].join('');\nmodule.exports = {\n  /**\n   * String representation of the exported Regular Expression; we construct this\n   * RegExp from a string to enable more detailed annotation and permutation\n   *\n   * @prop {String} pattern\n   */\n  pattern: pattern,\n\n  /**\n   * Regular Expression to identify a capture group in PCRE formats\n   * `(?<name>regex)`, `(?'name'regex)` or `(?P<name>regex)` (see\n   * regular-expressions.info/refext.html)\n   *\n   * @prop {RegExp} namedGroupRE\n   */\n  namedGroupRE: new RegExp(pattern)\n};","map":{"version":3,"sources":["/Users/hiromi/ionic-react-wordpress/node_modules/wpapi/lib/util/named-group-regexp.js"],"names":["pattern","join","module","exports","namedGroupRE","RegExp"],"mappings":"AAAA;;;AAGA;;AAEA,MAAMA,OAAO,GAAG,CACf;AACA,QAFe,EAGf;AACA,aAJe,EAKf;AACA,WANe,EAOf;AACA,OARe,EASf;AACA;AACA,WAXe,EAYf;AACA,KAbe,EAcdC,IAdc,CAcR,EAdQ,CAAhB;AAgBAC,MAAM,CAACC,OAAP,GAAiB;AAChB;;;;;;AAMAH,EAAAA,OAAO,EAAEA,OAPO;;AAShB;;;;;;;AAOAI,EAAAA,YAAY,EAAE,IAAIC,MAAJ,CAAYL,OAAZ;AAhBE,CAAjB","sourcesContent":["/**\n * @module util/named-group-regexp\n */\n'use strict';\n\nconst pattern = [\n\t// Capture group start\n\t'\\\\(\\\\?',\n\t// Capture group name begins either `P<`, `<` or `'`\n\t'(?:P<|<|\\')',\n\t// Everything up to the next `>`` or `'` (depending) will be the capture group name\n\t'([^>\\']+)',\n\t// Capture group end\n\t'[>\\']',\n\t// Get everything up to the end of the capture group: this is the RegExp used\n\t// when matching URLs to this route, which we can use for validation purposes.\n\t'([^\\\\)]*)',\n\t// Capture group end\n\t'\\\\)',\n].join( '' );\n\nmodule.exports = {\n\t/**\n\t * String representation of the exported Regular Expression; we construct this\n\t * RegExp from a string to enable more detailed annotation and permutation\n\t *\n\t * @prop {String} pattern\n\t */\n\tpattern: pattern,\n\n\t/**\n\t * Regular Expression to identify a capture group in PCRE formats\n\t * `(?<name>regex)`, `(?'name'regex)` or `(?P<name>regex)` (see\n\t * regular-expressions.info/refext.html)\n\t *\n\t * @prop {RegExp} namedGroupRE\n\t */\n\tnamedGroupRE: new RegExp( pattern ),\n};\n"]},"metadata":{},"sourceType":"script"}